[{"model": "learn.course", "pk": 1, "fields": {"title": "Python", "subtitle": "Python for Beginners: A Comprehensive Introduction", "slug": "python", "description": "Learn Python programming from basics to advanced concepts including data science, web development, and automation.", "created_at": "2025-05-04T12:43:16.321Z", "updated_at": "2025-05-16T06:56:20.725Z"}}, {"model": "learn.course", "pk": 2, "fields": {"title": "JavaScript for Beginners", "subtitle": "Javascript for Beginners: A Comprehensive Introduction", "slug": "javascript-for-beginners", "description": "Master JavaScript to build interactive web applications, learn modern frameworks like React, Vue, and Node.js.", "created_at": "2025-05-04T12:44:31.760Z", "updated_at": "2025-05-16T06:56:46.453Z"}}, {"model": "learn.course", "pk": 3, "fields": {"title": "Java", "subtitle": "Java for Beginners: A Comprehensive Introduction", "slug": "java", "description": "Explore Java programming for enterprise applications, Android development, and object-oriented programming principles.", "created_at": "2025-05-04T12:46:47.511Z", "updated_at": "2025-05-16T06:57:04.501Z"}}, {"model": "learn.course", "pk": 4, "fields": {"title": "C++ for Beginners", "subtitle": "C++ for Beginners: A Comprehensive Introduction", "slug": "c-for-beginners", "description": "Learn C++ for systems programming, game development, and high-performance applications with a focus on efficiency.", "created_at": "2025-05-04T12:48:07.463Z", "updated_at": "2025-05-16T06:57:20.220Z"}}, {"model": "learn.course", "pk": 5, "fields": {"title": "DSA for Beginners", "subtitle": "dSA for Beginners: A Comprehensive Introduction", "slug": "dsa-for-beginners", "description": "Master essential data structures like arrays, linked lists, trees, graphs, and hash tables to solve complex problems.", "created_at": "2025-05-04T12:51:59.580Z", "updated_at": "2025-05-16T06:57:38.668Z"}}, {"model": "learn.course", "pk": 6, "fields": {"title": "C-Programming", "subtitle": "C for Beginners: A Comprehensive Introduction", "slug": "c-programming", "description": "C is a powerful, general-purpose programming language that provides low-level memory access and efficient performance.", "created_at": "2025-05-04T12:54:02.531Z", "updated_at": "2025-05-12T07:04:50.114Z"}}, {"model": "learn.section", "pk": 1, "fields": {"course": 6, "title": "History of c", "content": "## History of C\r\n\r\nThe C programming language was developed by Dennis Ritchie at Bell Labs in the early 1970s. It was designed to be a system programming language and has since become one of the most widely used programming languages.\r\n\r\nKey historical points include:\r\n\r\n- **Efficiency:** C is known for its performance and efficiency, making it suitable for system-level programming.\r\n- **Low-Level Access:** C provides low-level access to memory and allows for direct manipulation of hardware.\r\n\r\nC has influenced many other programming languages, and its syntax and concepts are still widely used today.\r\n\r\n> **Info:** C was developed to rewrite the UNIX operating system, which was originally written in assembly language!", "order": 1, "created_at": "2025-05-12T07:13:04.172Z", "updated_at": "2025-05-12T07:13:04.172Z"}}, {"model": "learn.section", "pk": 2, "fields": {"course": 6, "title": "key features of C", "content": "## Key Features of C\r\n\r\n- **Portability:** C programs can be easily ported to different platforms with minimal changes.\r\n- **Powerful:** C provides powerful constructs and low-level access, making it suitable for system programming.\r\n- **Rich Libraries:** C has a vast standard library that provides functions for various tasks.\r\n- **Community Support:** C has a large and active community, providing extensive documentation and support.\r\n\r\nC's popularity is fueled by its efficiency, low-level capabilities, and its role as a foundation language for many modern programming languages.", "order": 2, "created_at": "2025-05-12T07:13:58.572Z", "updated_at": "2025-05-12T07:13:58.572Z"}}, {"model": "learn.section", "pk": 3, "fields": {"course": 6, "title": "Getting Started with C", "content": "## Getting Started with C\r\n\r\n### Setting Up Your Environment\r\n\r\nTo get started with C, you need to install a compiler and set up an IDE. Follow these steps:\r\n\r\n1. **Download a Compiler** - Install GCC (GNU Compiler Collection) for Windows, macOS, or Linux, or use an IDE like Visual Studio which includes a compiler.\r\n2. **Set Up an IDE** - Use IDEs like Visual Studio, Code::Blocks, or CLion for an enhanced coding experience.\r\n\r\n### Writing Your First C Program\r\n\r\nOnce your environment is set up, create a new C file and write your first program:\r\n\r\n```c\r\n#include <stdio.h>\r\n\r\nint main() {\r\n    printf(\"Hello, World!\\n\");\r\n    return 0;\r\n}\r\n```\r\n\r\nThis program includes the stdio.h library, defines a main function, prints \"Hello, World!\" and returns 0 to indicate successful execution.\r\n\r\n### Compiling and Running Your Program\r\n\r\nTo compile and run your program, use the command line or your IDE's build and run feature:\r\n\r\n```bash\r\ngcc hello.c -o hello\r\n./hello\r\n```\r\n\r\n> **Tip:** In many IDEs like Visual Studio, you can compile and run your code with a keyboard shortcut like F5.", "order": 3, "created_at": "2025-05-12T07:14:54.604Z", "updated_at": "2025-05-12T07:14:54.604Z"}}, {"model": "learn.section", "pk": 4, "fields": {"course": 6, "title": "Variables and Data Types in C", "content": "## Variables and Data Types in C\r\n\r\nIn C, variables are used to store data, and each variable can hold different data types. C supports various data types, including:\r\n\r\n### Basic Data Types\r\n\r\n| Data Type | Description | Example |\r\n|-----------|-------------|---------|\r\n| `int` | Stores integers | `int age = 30;` |\r\n| `float` | Stores floating-point numbers | `float salary = 85000.50f;` |\r\n| `double` | Stores double-precision floating-point numbers | `double pi = 3.14159;` |\r\n| `char` | Stores single characters | `char grade = 'A';` |\r\n\r\nIn C, you must declare the type of a variable before using it, unlike some modern languages that use type inference.", "order": 4, "created_at": "2025-05-12T07:15:45.335Z", "updated_at": "2025-05-12T07:15:45.335Z"}}, {"model": "learn.section", "pk": 5, "fields": {"course": 6, "title": "C Operators", "content": "## C Operators\r\n\r\nOperators in C perform various operations on variables and values. Here are the types of operators:\r\n\r\n### Arithmetic Operators\r\n\r\nUsed for basic arithmetic operations:\r\n\r\n- `+` (Addition)\r\n- `-` (Subtraction)\r\n- `*` (Multiplication)\r\n- `/` (Division)\r\n- `%` (Modulus)\r\n- `++` (Increment)\r\n- `--` (Decrement)\r\n\r\n```c\r\nint x = 5;\r\nint y = 2;\r\nprintf(\"%d\\n\", x + y);  // Outputs: 7\r\nprintf(\"%d\\n\", x % y);  // Outputs: 1\r\n```\r\n\r\n### Comparison Operators\r\n\r\nUsed to compare values:\r\n\r\n- `==` (Equal to)\r\n- `!=` (Not equal to)\r\n- `>` (Greater than)\r\n- `<` (Less than)\r\n- `>=` (Greater than or equal to)\r\n- `<=` (Less than or equal to)\r\n\r\n```c\r\nint a = 10;\r\nint b = 20;\r\nprintf(\"%d\\n\", a == b);  // Outputs: 0 (false)\r\nprintf(\"%d\\n\", a < b);   // Outputs: 1 (true)\r\n```\r\n\r\n### Logical Operators\r\n\r\nUsed to perform logical operations:\r\n\r\n- `&&` (Logical AND)\r\n- `||` (Logical OR)\r\n- `!` (Logical NOT)\r\n\r\n```c\r\nint is_adult = 1;\r\nint has_id = 0;\r\nprintf(\"%d\\n\", is_adult && has_id);  // Outputs: 0 (false)\r\nprintf(\"%d\\n\", is_adult || has_id);   // Outputs: 1 (true)\r\nprintf(\"%d\\n\", !is_adult);         // Outputs: 0 (false)\r\n```\r\n\r\n### Assignment Operators\r\n\r\nUsed to assign values to variables:\r\n\r\n- `=` (Assigns a value)\r\n- `+=` (Adds and assigns)\r\n- `-=` (Subtracts and assigns)\r\n- `*=` (Multiplies and assigns)\r\n- `/=` (Divides and assigns)\r\n- `%=` (Modulus and assigns)\r\n\r\n```c\r\nint a = 5;\r\na += 3;  // a = a + 3, now a is 8\r\na *= 2;  // a = a * 2, now a is 16\r\n```", "order": 5, "created_at": "2025-05-12T07:16:38.623Z", "updated_at": "2025-05-12T07:16:38.623Z"}}, {"model": "learn.section", "pk": 6, "fields": {"course": 6, "title": "Conditionals Statements in C", "content": "## Conditional Statements in C\r\n\r\nC supports several types of conditional statements that control the flow of execution based on certain conditions.\r\n\r\n### if-else Statement\r\n\r\n```c\r\nint age = 18;\r\nif (age >= 18) {\r\n    printf(\"You are an adult.\\n\");\r\n} else {\r\n    printf(\"You are not an adult.\\n\");\r\n}\r\n```\r\n\r\nThe code above checks if the person is 18 or older and prints the appropriate message.\r\n\r\n### else if Statement\r\n\r\nThe `else if` statement can be used to check multiple expressions:\r\n\r\n```c\r\nint day = 3;\r\nif (day == 1) {\r\n    printf(\"Monday\\n\");\r\n} else if (day == 2) {\r\n    printf(\"Tuesday\\n\");\r\n} else if (day == 3) {\r\n    printf(\"Wednesday\\n\");\r\n} else {\r\n    printf(\"Unknown day\\n\");\r\n}\r\n```\r\n\r\nThis code checks the value of the `day` variable and prints the corresponding day name.", "order": 6, "created_at": "2025-05-12T07:18:22.085Z", "updated_at": "2025-05-12T07:18:22.085Z"}}, {"model": "learn.section", "pk": 7, "fields": {"course": 6, "title": "Loops in C", "content": "## Loops in C\r\n\r\nLoops are used to execute a block of code repeatedly. C supports `for` and `while` loops.\r\n\r\n### for Loop\r\n\r\nA `for` loop is commonly used for iterating through a sequence:\r\n\r\n```c\r\nfor (int i = 0; i < 5; ++i) {\r\n    printf(\"%d\\n\", i);  // Outputs: 0, 1, 2, 3, 4\r\n}\r\n```\r\n\r\n> **Remember:** In C, indexing starts at 0, not 1.\r\n\r\n### while Loop\r\n\r\nThe `while` loop continues to run as long as a condition is true:\r\n\r\n```c\r\nint i = 0;\r\nwhile (i < 5) {\r\n    printf(\"%d\\n\", i);\r\n    ++i;\r\n}\r\n```\r\n\r\nBe careful with while loops to ensure they eventually terminate - always make sure the condition will eventually become false.", "order": 7, "created_at": "2025-05-12T07:18:56.203Z", "updated_at": "2025-05-12T07:18:56.203Z"}}, {"model": "learn.section", "pk": 8, "fields": {"course": 6, "title": "Functions in C", "content": "## Functions in C\r\n\r\nFunctions are reusable blocks of code designed to perform specific tasks. Here's how to create and call functions in C:\r\n\r\n### Basic Function Example\r\n\r\n```c\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nint main() {\r\n    int result = add(10, 20);\r\n    printf(\"Result: %d\\n\", result);  // Outputs: 30\r\n    return 0;\r\n}\r\n```\r\n\r\nThis defines a function named `add` that takes two parameters and returns their sum.\r\n\r\n### Default Parameters\r\n\r\nUnlike some modern languages, C does not support default parameters natively. Alternative approaches include:\r\n\r\n```c\r\n// Using multiple functions\r\nvoid greet_default() {\r\n    printf(\"Hello, World\\n\");\r\n}\r\n\r\nvoid greet(char* name) {\r\n    printf(\"Hello, %s\\n\", name);\r\n}\r\n\r\n// Or using a macro\r\n#define GREET(name) printf(\"Hello, %s\\n\", (name) ? (name) : \"World\")\r\n```\r\n\r\nThese approaches provide functionality similar to default parameters found in other languages.", "order": 8, "created_at": "2025-05-12T07:19:58.236Z", "updated_at": "2025-05-12T07:19:58.236Z"}}, {"model": "learn.section", "pk": 9, "fields": {"course": 6, "title": "Resources for Learning C", "content": "## Resources for Learning C\r\n\r\n### Official Documentation\r\nThe [C Reference](https://en.cppreference.com/w/c) is a comprehensive guide to C's features.\r\n\r\n### Recommended Books\r\n- \"The C Programming Language\" by Brian W. Kernighan and Dennis M. Ritchie\r\n- \"C Primer Plus\" by Stephen Prata", "order": 9, "created_at": "2025-05-12T07:20:45.658Z", "updated_at": "2025-05-12T07:20:45.658Z"}}, {"model": "learn.section", "pk": 10, "fields": {"course": 1, "title": "History of Python", "content": "## History of Python\r\n\r\nPython was created by Guido van Rossum and first released in 1991. It was designed to be easy to read and write, making it a great choice for beginners.\r\n\r\nKey historical points include:\r\n\r\n- **Readability:** Python's syntax emphasizes readability, allowing developers to express concepts in fewer lines of code.\r\n- **Interpreted Language:** Python code is executed line by line, which makes debugging easier.\r\n\r\nPython has grown significantly since its inception, becoming one of the most popular programming languages worldwide, with applications ranging from web development to artificial intelligence.\r\n\r\n> **Fun Fact:** Python is named after the British comedy group Monty Python, not the snake!", "order": 1, "created_at": "2025-05-16T06:14:24.274Z", "updated_at": "2025-05-16T06:14:24.274Z"}}, {"model": "learn.section", "pk": 11, "fields": {"course": 1, "title": "Key Features", "content": "## Key Features\r\n\r\n### Simplicity\r\nPython's syntax is clean and straightforward, making it an excellent choice for beginners.\r\n\r\n### Versatility\r\nPython can be used for web development, data analysis, AI, scientific computing, and more.\r\n\r\n### Rich Libraries\r\nPython has a vast standard library and a large ecosystem of third-party packages.\r\n\r\n### Community Support\r\nPython has a large and active community, providing extensive documentation and support.\r\n\r\nPython's popularity is fueled by its cross-platform compatibility (runs on Windows, macOS, and Linux) and its beginner-friendly syntax which makes it easier to learn than many other programming languages.", "order": 2, "created_at": "2025-05-16T06:58:47.817Z", "updated_at": "2025-05-16T06:58:47.817Z"}}, {"model": "learn.section", "pk": 12, "fields": {"course": 1, "title": "Getting Started", "content": "## Getting Started\r\n\r\n### Setting Up\r\n\r\nTo get started with Python, you need to install Python and set up an IDE. Follow these steps:\r\n\r\n1. **Download Python**\r\n   Visit the [Python download page](https://www.python.org/downloads/) and install the appropriate version for your system.\r\n\r\n2. **Set Up an IDE**\r\n   Use IDEs like PyCharm, Visual Studio Code, or Jupyter Notebook for an enhanced coding experience.\r\n\r\n### First Program\r\n\r\nOnce your environment is set up, create a new Python file and write your first program:\r\n\r\n```python\r\nprint(\"Hello, World!\")\r\n```\r\n\r\nThis simple line of code displays the text \"Hello, World!\" when executed.\r\n\r\n### Running Programs\r\n\r\nTo run your program, use the command line or your IDE's run feature:\r\n\r\n```\r\npython hello.py\r\n```\r\n\r\n> **Tip:** In many IDEs, you can run your code with a keyboard shortcut like F5 or Ctrl+F5.", "order": 3, "created_at": "2025-05-16T06:59:42.755Z", "updated_at": "2025-05-16T06:59:42.755Z"}}, {"model": "learn.section", "pk": 13, "fields": {"course": 1, "title": "Variables and Data Types", "content": "## Variables and Data Types\r\n\r\nIn Python, variables are used to store data, and each variable can hold different data types. Python supports various data types, including:\r\n\r\n### Basic Data Types\r\n\r\n| Data Type | Description | Example |\r\n|-----------|-------------|---------|\r\n| `int` | Stores integers | `age = 30` |\r\n| `float` | Stores floating-point numbers | `salary = 85000.50` |\r\n| `str` | Stores strings | `name = \"John\"` |\r\n| `bool` | Stores True or False values | `is_python_fun = True` |\r\n\r\nPython is dynamically typed, which means you don't need to declare the variable type explicitly when creating them.", "order": 4, "created_at": "2025-05-16T07:01:26.656Z", "updated_at": "2025-05-16T07:01:26.656Z"}}, {"model": "learn.section", "pk": 14, "fields": {"course": 1, "title": "Python Operators", "content": "## Python Operators\r\n\r\nOperators in Python perform various operations on variables and values. Here are the types of operators:\r\n\r\n### Arithmetic\r\n\r\nUsed for basic arithmetic operations:\r\n\r\n- `+` (Addition)\r\n- `-` (Subtraction)\r\n- `*` (Multiplication)\r\n- `/` (Division)\r\n- `%` (Modulus)\r\n- `**` (Exponentiation)\r\n- `//` (Floor Division)\r\n\r\n```python\r\nx = 5\r\ny = 2\r\nprint(x + y)  # Outputs: 7\r\nprint(x % y)  # Outputs: 1\r\n```\r\n\r\n### Comparison\r\n\r\nUsed to compare values:\r\n\r\n- `==` (Equal to)\r\n- `!=` (Not equal to)\r\n- `>` (Greater than)\r\n- `<` (Less than)\r\n- `>=` (Greater than or equal to)\r\n- `<=` (Less than or equal to)\r\n\r\n```python\r\na = 10\r\nb = 20\r\nprint(a == b)  # Outputs: False\r\nprint(a < b)   # Outputs: True\r\n```\r\n\r\n### Logical\r\n\r\nUsed to perform logical operations:\r\n\r\n- `and` (Logical AND)\r\n- `or` (Logical OR)\r\n- `not` (Logical NOT)\r\n\r\n```python\r\nis_adult = True\r\nhas_id = False\r\nprint(is_adult and has_id)  # Outputs: False\r\nprint(is_adult or has_id)   # Outputs: True\r\nprint(not is_adult)         # Outputs: False\r\n```\r\n\r\n### Assignment\r\n\r\nUsed to assign values to variables:\r\n\r\n- `=` (Assigns a value)\r\n- `+=` (Adds and assigns)\r\n- `-=` (Subtracts and assigns)\r\n- `*=` (Multiplies and assigns)\r\n- `/=` (Divides and assigns)\r\n- `%=` (Modulus and assigns)\r\n\r\n```python\r\na = 5\r\na += 3  # a = a + 3, now a is 8\r\na *= 2  # a = a * 2, now a is 16\r\n```", "order": 5, "created_at": "2025-05-16T07:02:29.990Z", "updated_at": "2025-05-16T07:02:29.990Z"}}, {"model": "learn.section", "pk": 15, "fields": {"course": 1, "title": "Conditional Statements", "content": "## Conditional Statements\r\n\r\nPython supports several types of conditional statements that control the flow of execution based on certain conditions.\r\n\r\n### If-Else\r\n\r\n```python\r\nage = 18\r\nif age >= 18:\r\n    print(\"You are an adult.\")\r\nelse:\r\n    print(\"You are not an adult.\")\r\n```\r\n\r\nThe code above checks if the person is 18 or older and prints the appropriate message.\r\n\r\n### Elif\r\n\r\nThe `elif` statement can be used to check multiple expressions:\r\n\r\n```python\r\nday = 3\r\nif day == 1:\r\n    print(\"Monday\")\r\nelif day == 2:\r\n    print(\"Tuesday\")\r\nelif day == 3:\r\n    print(\"Wednesday\")\r\nelse:\r\n    print(\"Unknown day\")\r\n```\r\n\r\nThis code checks the value of the `day` variable and prints the corresponding day name.", "order": 6, "created_at": "2025-05-16T07:03:18.541Z", "updated_at": "2025-05-16T07:03:18.541Z"}}, {"model": "learn.section", "pk": 16, "fields": {"course": 1, "title": "Loops", "content": "## Loops\r\n\r\nLoops are used to execute a block of code repeatedly. Python supports `for` and `while` loops.\r\n\r\n### For Loop\r\n\r\nA `for` loop is commonly used for iterating over a sequence (like a list or range):\r\n\r\n```python\r\nfor i in range(5):\r\n    print(i)  # Outputs: 0, 1, 2, 3, 4\r\n```\r\n\r\n> **Remember:** In Python, indexing starts at 0, not 1.\r\n\r\n### While Loop\r\n\r\nThe `while` loop continues to run as long as a condition is true:\r\n\r\n```python\r\ni = 0\r\nwhile i < 5:\r\n    print(i)\r\n    i += 1\r\n```\r\n\r\nBe careful with while loops to ensure they eventually terminate - always make sure the condition will eventually become false.", "order": 7, "created_at": "2025-05-16T07:03:59.511Z", "updated_at": "2025-05-16T07:03:59.511Z"}}, {"model": "learn.section", "pk": 17, "fields": {"course": 1, "title": "Functions", "content": "## Functions\r\n\r\nFunctions are reusable blocks of code designed to perform specific tasks. Here's how to create and call functions in Python:\r\n\r\n### Basic Functions\r\n\r\n```python\r\ndef add(a, b):\r\n    return a + b\r\n\r\nresult = add(10, 20)\r\nprint(\"Result:\", result)  # Outputs: 30\r\n```\r\n\r\nThis defines a function named `add` that takes two parameters and returns their sum.\r\n\r\n### Default Parameters\r\n\r\nYou can define functions with default parameter values:\r\n\r\n```python\r\ndef greet(name=\"World\"):\r\n    print(\"Hello,\", name)\r\n\r\ngreet()          # Outputs: Hello, World\r\ngreet(\"Alice\")   # Outputs: Hello, Alice\r\n```\r\n\r\nDefault parameters make functions more flexible by allowing arguments to be optional.", "order": 8, "created_at": "2025-05-16T07:05:50.639Z", "updated_at": "2025-05-16T07:05:50.639Z"}}, {"model": "learn.section", "pk": 18, "fields": {"course": 1, "title": "Resources", "content": "## Resources\r\n\r\n### Official Documentation\r\nThe [Python Documentation](https://docs.python.org/3/) is a comprehensive guide to Python's features.\r\n\r\n### Recommended Books\r\n- \"Automate the Boring Stuff with Python\" by Al Sweigart\r\n- \"Python Crash Course\" by Eric Matthes", "order": 9, "created_at": "2025-05-16T07:06:31.190Z", "updated_at": "2025-05-16T07:06:31.190Z"}}, {"model": "learn.section", "pk": 19, "fields": {"course": 4, "title": "History of C++", "content": "## History of C++\r\n\r\nC++ was developed by Bjarne Stroustrup as an extension of the C programming language. It was first released in 1985 and has since become one of the most widely used programming languages.\r\n\r\nKey historical points include:\r\n\r\n- **Efficiency:** C++ is known for its performance and efficiency, making it suitable for resource-intensive applications.\r\n- **Object-Oriented:** C++ supports object-oriented programming, which helps in organizing complex programs.\r\n\r\nC++ has evolved over the years, with the latest standards adding many new features and improvements.\r\n\r\n> ℹ️ C++ was originally named \"C with Classes\" before being renamed to C++ in 1983!\r\n\r\n## Key Features of C++\r\n\r\n- **Performance**: C++ provides high performance and is used in systems programming, game development, and real-time systems.\r\n- **Flexibility**: C++ supports multiple programming paradigms including procedural, object-oriented, and generic programming.\r\n- **Rich Libraries**: C++ has a vast standard library and numerous third-party libraries for various applications.\r\n- **Community Support**: C++ has a large and active community, providing extensive documentation and support.\r\n\r\nC++'s popularity is fueled by its cross-platform compatibility (runs on Windows, macOS, and Linux) and its ability to provide low-level memory manipulation with high-level abstractions.", "order": 1, "created_at": "2025-05-16T07:22:41.960Z", "updated_at": "2025-05-16T07:22:41.960Z"}}, {"model": "learn.section", "pk": 20, "fields": {"course": 4, "title": "Getting Started", "content": "## Getting Started\r\n\r\n### Setting Up Your Environment\r\n\r\nTo get started with C++, you need to install a compiler and set up an IDE. Follow these steps:\r\n\r\n1. **Download a Compiler**: Install GCC (GNU Compiler Collection) for Windows, macOS, or Linux, or use an IDE like Visual Studio which includes a compiler.\r\n2. **Set Up an IDE**: Use IDEs like Visual Studio, Code::Blocks, or CLion for an enhanced coding experience.\r\n\r\n### Writing Your First C++ Program\r\n\r\nOnce your environment is set up, create a new C++ file and write your first program:\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\nint main() {\r\n    std::cout << \"Hello, World!\" << std::endl;\r\n    return 0;\r\n}\r\n```\r\n\r\nThis simple program includes the iostream library and displays the text \"Hello, World!\" when executed.\r\n\r\n### Compiling and Running Your Program\r\n\r\nTo compile and run your program, use the command line or your IDE's build and run feature:\r\n\r\n```bash\r\ng++ hello.cpp -o hello\r\n./hello\r\n```\r\n\r\n> 💡 **Tip:** In many IDEs like Visual Studio, you can build and run your code with a keyboard shortcut like F5 or Ctrl+F5.", "order": 2, "created_at": "2025-05-16T07:23:34.739Z", "updated_at": "2025-05-16T07:23:34.739Z"}}, {"model": "learn.section", "pk": 21, "fields": {"course": 4, "title": "Variables and Data Types", "content": "## Variables and Data Types \r\n\r\nIn C++, variables are used to store data, and each variable can hold different data types. C++ supports various data types, including:\r\n\r\n### Basic Data Types\r\n\r\n| Data Type | Description | Example |\r\n|-----------|-------------|---------|\r\n| `int` | Stores integers | `int age = 30;` |\r\n| `float` | Stores floating-point numbers | `float salary = 85000.50f;` |\r\n| `double` | Stores double-precision floating-point numbers | `double pi = 3.14159;` |\r\n| `char` | Stores single characters | `char grade = 'A';` |\r\n| `bool` | Stores True or False values | `bool is_cpp_fun = true;` |\r\n\r\nUnlike some other languages, C++ is statically typed, which means you must declare the variable type explicitly when creating them.", "order": 3, "created_at": "2025-05-16T07:24:18.223Z", "updated_at": "2025-05-16T07:24:18.223Z"}}, {"model": "learn.section", "pk": 22, "fields": {"course": 4, "title": "C++ Operators", "content": "## C++ Operators\r\n\r\nOperators in C++ perform various operations on variables and values. Here are the types of operators:\r\n\r\n### Arithmetic Operators\r\n\r\nUsed for basic arithmetic operations:\r\n\r\n- `+` (Addition)\r\n- `-` (Subtraction)\r\n- `*` (Multiplication)\r\n- `/` (Division)\r\n- `%` (Modulus)\r\n- `++` (Increment)\r\n- `--` (Decrement)\r\n\r\n```cpp\r\nint x = 5;\r\nint y = 2;\r\nstd::cout << (x + y) << std::endl;  // Outputs: 7\r\nstd::cout << (x % y) << std::endl;  // Outputs: 1\r\n```\r\n\r\n### Comparison Operators\r\n\r\nUsed to compare values:\r\n\r\n- `==` (Equal to)\r\n- `!=` (Not equal to)\r\n- `>` (Greater than)\r\n- `<` (Less than)\r\n- `>=` (Greater than or equal to)\r\n- `<=` (Less than or equal to)\r\n\r\n```cpp\r\nint a = 10;\r\nint b = 20;\r\nstd::cout << (a == b) << std::endl;  // Outputs: 0 (false)\r\nstd::cout << (a < b) << std::endl;   // Outputs: 1 (true)\r\n```\r\n\r\n### Logical Operators\r\n\r\nUsed to perform logical operations:\r\n\r\n- `&&` (Logical AND)\r\n- `||` (Logical OR)\r\n- `!` (Logical NOT)\r\n\r\n```cpp\r\nbool is_adult = true;\r\nbool has_id = false;\r\nstd::cout << (is_adult && has_id) << std::endl;  // Outputs: 0 (false)\r\nstd::cout << (is_adult || has_id) << std::endl;   // Outputs: 1 (true)\r\nstd::cout << (!is_adult) << std::endl;         // Outputs: 0 (false)\r\n```\r\n\r\n### Assignment Operators\r\n\r\nUsed to assign values to variables:\r\n\r\n- `=` (Assigns a value)\r\n- `+=` (Adds and assigns)\r\n- `-=` (Subtracts and assigns)\r\n- `*=` (Multiplies and assigns)\r\n- `/=` (Divides and assigns)\r\n- `%=` (Modulus and assigns)\r\n\r\n```cpp\r\nint a = 5;\r\na += 3;  // a = a + 3, now a is 8\r\na *= 2;  // a = a * 2, now a is 16\r\n```", "order": 4, "created_at": "2025-05-16T07:25:11.338Z", "updated_at": "2025-05-16T07:25:11.338Z"}}, {"model": "learn.section", "pk": 23, "fields": {"course": 4, "title": "Conditional Statements", "content": "## Conditional Statements\r\n\r\nC++ supports several types of conditional statements that control the flow of execution based on certain conditions.\r\n\r\n### if-else Statement\r\n\r\n```cpp\r\nint age = 18;\r\nif (age >= 18) {\r\n    std::cout << \"You are an adult.\" << std::endl;\r\n} else {\r\n    std::cout << \"You are not an adult.\" << std::endl;\r\n}\r\n```\r\n\r\nThe code above checks if the person is 18 or older and prints the appropriate message.\r\n\r\n### else if Statement\r\n\r\nThe `else if` statement can be used to check multiple expressions:\r\n\r\n```cpp\r\nint day = 3;\r\nif (day == 1) {\r\n    std::cout << \"Monday\" << std::endl;\r\n} else if (day == 2) {\r\n    std::cout << \"Tuesday\" << std::endl;\r\n} else if (day == 3) {\r\n    std::cout << \"Wednesday\" << std::endl;\r\n} else {\r\n    std::cout << \"Unknown day\" << std::endl;\r\n}\r\n```\r\n\r\nThis code checks the value of the `day` variable and prints the corresponding day name.", "order": 5, "created_at": "2025-05-16T07:25:59.104Z", "updated_at": "2025-05-16T07:25:59.104Z"}}, {"model": "learn.section", "pk": 24, "fields": {"course": 4, "title": "Loops", "content": "## Loops\r\n\r\nLoops are used to execute a block of code repeatedly. C++ supports `for` and `while` loops.\r\n\r\n### for Loop\r\n\r\nA `for` loop is commonly used for iterating a specific number of times:\r\n\r\n```cpp\r\nfor (int i = 0; i < 5; ++i) {\r\n    std::cout << i << std::endl;  // Outputs: 0, 1, 2, 3, 4\r\n}\r\n```\r\n\r\n> ⚠️ **Remember:** In C++, indexing starts at 0, not 1.\r\n\r\n### while Loop\r\n\r\nThe `while` loop continues to run as long as a condition is true:\r\n\r\n```cpp\r\nint i = 0;\r\nwhile (i < 5) {\r\n    std::cout << i << std::endl;\r\n    ++i;\r\n}\r\n```\r\n\r\nBe careful with while loops to ensure they eventually terminate - always make sure the condition will eventually become false.", "order": 7, "created_at": "2025-05-16T07:26:55.291Z", "updated_at": "2025-05-16T07:26:55.291Z"}}, {"model": "learn.section", "pk": 25, "fields": {"course": 4, "title": "Functions", "content": "## Functions\r\n\r\nFunctions are reusable blocks of code designed to perform specific tasks. Here's how to create and call functions in C++:\r\n\r\n### Basic Function Example\r\n\r\n```cpp\r\nint add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nint main() {\r\n    int result = add(10, 20);\r\n    std::cout << \"Result: \" << result << std::endl;  // Outputs: 30\r\n    return 0;\r\n}\r\n```\r\n\r\nThis defines a function named `add` that takes two parameters and returns their sum.\r\n\r\n### Function with Default Parameters\r\n\r\nYou can define functions with default parameter values:\r\n\r\n```cpp\r\nvoid greet(std::string name = \"World\") {\r\n    std::cout << \"Hello, \" << name << std::endl;\r\n}\r\n\r\nint main() {\r\n    greet();          // Outputs: Hello, World\r\n    greet(\"Alice\");   // Outputs: Hello, Alice\r\n    return 0;\r\n}\r\n```\r\n\r\nDefault parameters make functions more flexible by allowing arguments to be optional.", "order": 8, "created_at": "2025-05-16T07:27:28.704Z", "updated_at": "2025-05-16T07:27:28.705Z"}}, {"model": "learn.section", "pk": 26, "fields": {"course": 4, "title": "Resources", "content": "## Resources\r\n\r\n- **Official Documentation**: The [C++ Reference](https://en.cppreference.com/w/) is a comprehensive guide to C++'s features.\r\n- **Recommended Books**:\r\n  - \"The C++ Programming Language\" by Bjarne Stroustrup\r\n  - \"C++ Primer\" by Stanley B. Lippman", "order": 9, "created_at": "2025-05-16T07:28:02.918Z", "updated_at": "2025-05-16T07:28:02.918Z"}}, {"model": "learn.section", "pk": 27, "fields": {"course": 5, "title": "Introduction to DSA", "content": "## Introduction to DSA\r\n\r\nData Structures and Algorithms (DSA) are fundamental concepts in computer science that help in efficiently organizing and manipulating data. Understanding DSA is crucial for solving complex problems and optimizing code performance.\r\n\r\n> ℹ️ Data structures organize and store data, while algorithms are step-by-step procedures for solving problems.", "order": 1, "created_at": "2025-05-16T07:34:57.664Z", "updated_at": "2025-05-16T07:34:57.664Z"}}, {"model": "learn.section", "pk": 28, "fields": {"course": 5, "title": "Data Structures", "content": "## Data Structures\r\n\r\nData structures are ways to store and organize data in a computer so that it can be used efficiently. Here are some basic data structures:\r\n\r\n- **Arrays**: Collections of elements stored at contiguous memory locations.\r\n- **Linked Lists**: Linear data structure where each element is a separate object called a node.\r\n- **Stacks**: Linear data structure that follows the Last In First Out (LIFO) principle.\r\n- **Queues**: Linear data structure that follows the First In First Out (FIFO) principle.\r\n\r\n### Arrays\r\n\r\nArrays are a collection of elements stored at contiguous memory locations. They are used to store multiple values in a single variable.\r\n\r\n```python\r\n# Declaring an array\r\nfruits = [\"Apple\", \"Banana\", \"Cherry\"]\r\n\r\n# Accessing array elements\r\nprint(fruits[0])  # Outputs: Apple\r\n\r\n# Adding an element to the array\r\nfruits.append(\"Orange\")\r\nprint(fruits)  # Outputs: ['Apple', 'Banana', 'Cherry', 'Orange']\r\n```\r\n\r\n### Linked Lists\r\n\r\nA linked list is a linear data structure where each element is a separate object, called a node. Each node contains data and a reference (or link) to the next node in the sequence.\r\n\r\n```python\r\n# Node class\r\nclass Node:\r\n    def __init__(self, data):\r\n        self.data = data\r\n        self.next = None\r\n\r\n# LinkedList class\r\nclass LinkedList:\r\n    def __init__(self):\r\n        self.head = None\r\n\r\n    # Add a node to the end of the list\r\n    def append(self, data):\r\n        new_node = Node(data)\r\n        if self.head is None:\r\n            self.head = new_node\r\n        else:\r\n            current = self.head\r\n            while current.next:\r\n                current = current.next\r\n            current.next = new_node\r\n\r\n    # Print the list\r\n    def print_list(self):\r\n        current = self.head\r\n        while current:\r\n            print(current.data)\r\n            current = current.next\r\n\r\n# Example usage\r\nlist = LinkedList()\r\nlist.append(1)\r\nlist.append(2)\r\nlist.append(3)\r\nlist.print_list()  # Outputs: 1 2 3\r\n```\r\n\r\n> 💡 **Tip:** Linked lists are excellent for frequent insertions and deletions, while arrays are better for random access.\r\n\r\n### Stacks\r\n\r\nA stack is a linear data structure that follows the Last In First Out (LIFO) principle. Elements can be added and removed only from the top of the stack.\r\n\r\n```python\r\n# Stack class\r\nclass Stack:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    # Add an element to the stack\r\n    def push(self, item):\r\n        self.items.append(item)\r\n\r\n    # Remove and return the top element\r\n    def pop(self):\r\n        if not self.items:\r\n            return \"Underflow\"\r\n        return self.items.pop()\r\n\r\n    # Return the top element without removing it\r\n    def peek(self):\r\n        if not self.items:\r\n            return \"No elements in Stack\"\r\n        return self.items[-1]\r\n\r\n    # Check if the stack is empty\r\n    def is_empty(self):\r\n        return len(self.items) == 0\r\n\r\n    # Print the stack\r\n    def print_stack(self):\r\n        print(\" \".join(map(str, self.items)))\r\n\r\n# Example usage\r\nstack = Stack()\r\nstack.push(10)\r\nstack.push(20)\r\nstack.push(30)\r\nstack.print_stack()  # Outputs: 10 20 30\r\nprint(stack.pop())  # Outputs: 30\r\nprint(stack.peek())  # Outputs: 20\r\n```\r\n\r\n### Queues\r\n\r\nA queue is a linear data structure that follows the First In First Out (FIFO) principle. Elements are added at the rear and removed from the front.\r\n\r\n```python\r\n# Queue class\r\nclass Queue:\r\n    def __init__(self):\r\n        self.items = []\r\n\r\n    # Add an element to the queue\r\n    def enqueue(self, item):\r\n        self.items.append(item)\r\n\r\n    # Remove and return the front element\r\n    def dequeue(self):\r\n        if not self.items:\r\n            return \"Underflow\"\r\n        return self.items.pop(0)\r\n\r\n    # Return the front element without removing it\r\n    def front(self):\r\n        if not self.items:\r\n            return \"No elements in Queue\"\r\n        return self.items[0]\r\n\r\n    # Check if the queue is empty\r\n    def is_empty(self):\r\n        return len(self.items) == 0\r\n\r\n    # Print the queue\r\n    def print_queue(self):\r\n        print(\" \".join(map(str, self.items)))\r\n\r\n# Example usage\r\nqueue = Queue()\r\nqueue.enqueue(10)\r\nqueue.enqueue(20)\r\nqueue.enqueue(30)\r\nqueue.print_queue()  # Outputs: 10 20 30\r\nprint(queue.dequeue())  # Outputs: 10\r\nprint(queue.front())  # Outputs: 20\r\n```", "order": 2, "created_at": "2025-05-16T07:36:57.967Z", "updated_at": "2025-05-16T07:36:57.967Z"}}, {"model": "learn.section", "pk": 29, "fields": {"course": 5, "title": "Algorithms", "content": "## Algorithms\r\n\r\nAlgorithms are step-by-step procedures or formulas for solving problems. Here are some basic algorithms:\r\n\r\n### Linear Search\r\n\r\nLinear search is a simple search algorithm that checks each element in the array until the target element is found or the array ends.\r\n\r\n```python\r\ndef linear_search(arr, target):\r\n    for i in range(len(arr)):\r\n        if arr[i] == target:\r\n            return i\r\n    return -1\r\n\r\n# Example usage\r\narr = [2, 4, 6, 8, 10]\r\ntarget = 6\r\nresult = linear_search(arr, target)\r\nprint(result)  # Outputs: 2\r\n```\r\n\r\n### Binary Search\r\n\r\nBinary search is an efficient search algorithm that works on sorted arrays. It repeatedly divides the search interval in half.\r\n\r\n```python\r\ndef binary_search(arr, target):\r\n    left, right = 0, len(arr) - 1\r\n\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n\r\n        if arr[mid] == target:\r\n            return mid\r\n        elif arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n\r\n    return -1\r\n\r\n# Example usage\r\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\ntarget = 7\r\nresult = binary_search(arr, target)\r\nprint(result)  # Outputs: 6\r\n```\r\n\r\n> ⚠️ **Remember:** Binary search only works on sorted arrays.\r\n\r\n### Bubble Sort\r\n\r\nBubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order.\r\n\r\n```python\r\ndef bubble_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n - 1):\r\n        for j in range(n - i - 1):\r\n            if arr[j] > arr[j + 1]:\r\n                # Swap arr[j] and arr[j + 1]\r\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\r\n    return arr\r\n\r\n# Example usage\r\narr = [64, 34, 25, 12, 22, 11, 90]\r\nsorted_arr = bubble_sort(arr)\r\nprint(sorted_arr)  # Outputs: [11, 12, 22, 25, 34, 64, 90]\r\n```\r\n\r\n### Insertion Sort\r\n\r\nInsertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort or merge sort.\r\n\r\n```python\r\ndef insertion_sort(arr):\r\n    n = len(arr)\r\n    for i in range(1, n):\r\n        key = arr[i]\r\n        j = i - 1\r\n\r\n        # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position\r\n        while j >= 0 and arr[j] > key:\r\n            arr[j + 1] = arr[j]\r\n            j -= 1\r\n        arr[j + 1] = key\r\n    return arr\r\n\r\n# Example usage\r\narr = [12, 11, 13, 5, 6]\r\nsorted_arr = insertion_sort(arr)\r\nprint(sorted_arr)  # Outputs: [5, 6, 11, 12, 13]\r\n```", "order": 3, "created_at": "2025-05-16T07:38:43.157Z", "updated_at": "2025-05-16T07:38:43.157Z"}}, {"model": "learn.section", "pk": 30, "fields": {"course": 5, "title": "Advanced Topics", "content": "## Advanced Topics\r\n\r\nHere are some advanced data structures and algorithms that are widely used in computer science:\r\n\r\n### Hash Tables\r\n\r\nHash tables are used to store key-value pairs. They provide efficient insertion, deletion, and lookup operations.\r\n\r\n```python\r\n# Hash table using Python dictionary\r\nhash_table = {}\r\n\r\n# Inserting key-value pairs\r\nhash_table[\"name\"] = \"Alice\"\r\nhash_table[\"age\"] = 25\r\nhash_table[\"city\"] = \"New York\"\r\n\r\n# Accessing values\r\nprint(hash_table[\"name\"])  # Outputs: Alice\r\n\r\n# Deleting a key-value pair\r\ndel hash_table[\"age\"]\r\n\r\n# Checking if a key exists\r\nprint(\"age\" in hash_table)  # Outputs: False\r\n```\r\n\r\n### Binary Trees\r\n\r\nA binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child.\r\n\r\n```python\r\n# Node class\r\nclass Node:\r\n    def __init__(self, key):\r\n        self.left = None\r\n        self.right = None\r\n        self.val = key\r\n\r\n# Inorder traversal\r\ndef inorder(root):\r\n    if root:\r\n        # Traverse the left subtree\r\n        inorder(root.left)\r\n        # Visit the root\r\n        print(root.val, end=\" \")\r\n        # Traverse the right subtree\r\n        inorder(root.right)\r\n\r\n# Insert a node\r\ndef insert(root, key):\r\n    if root is None:\r\n        return Node(key)\r\n    else:\r\n        if root.val < key:\r\n            root.right = insert(root.right, key)\r\n        else:\r\n            root.left = insert(root.left, key)\r\n    return root\r\n\r\n# Example usage\r\nroot = Node(50)\r\nroot = insert(root, 30)\r\nroot = insert(root, 20)\r\nroot = insert(root, 40)\r\nroot = insert(root, 70)\r\nroot = insert(root, 60)\r\nroot = insert(root, 80)\r\n\r\n# Print inorder traversal\r\ninorder(root)  # Outputs: 20 30 40 50 60 70 80\r\n```\r\n\r\n### Graphs\r\n\r\nA graph is a collection of nodes called vertices, and the connections between them called edges. Graphs can be used to represent various real-world problems.\r\n\r\n```python\r\n# Graph represented as an adjacency list\r\ngraph = {\r\n    'A': ['B', 'C'],\r\n    'B': ['A', 'D', 'E'],\r\n    'C': ['A', 'F'],\r\n    'D': ['B'],\r\n    'E': ['B', 'F'],\r\n    'F': ['C', 'E']\r\n}\r\n\r\n# Function to perform BFS\r\ndef bfs(graph, start):\r\n    visited = set()\r\n    queue = [start]\r\n    while queue:\r\n        vertex = queue.pop(0)\r\n        if vertex not in visited:\r\n            print(vertex, end=\" \")\r\n            visited.add(vertex)\r\n            queue.extend(set(graph[vertex]) - visited)\r\n\r\n# Example usage\r\nbfs(graph, 'A')  # Outputs: A B C D E F\r\n```", "order": 4, "created_at": "2025-05-16T07:39:55.083Z", "updated_at": "2025-05-16T07:39:55.083Z"}}, {"model": "learn.section", "pk": 31, "fields": {"course": 5, "title": "Resources", "content": "## Resources\r\n\r\n### Official Documentation\r\nThe [Python Documentation](https://docs.python.org/3/) is a comprehensive guide to Python's features.\r\n\r\n### Recommended Books\r\n- \"Introduction to Algorithms\" by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein\r\n- \"Data Structures and Algorithms in Python\" by Michael T. Goodrich\r\n\r\nOnline courses like Coursera, Udacity, and edX offer excellent courses on data structures and algorithms.", "order": 6, "created_at": "2025-05-16T07:42:00.093Z", "updated_at": "2025-05-16T07:42:00.093Z"}}, {"model": "learn.section", "pk": 32, "fields": {"course": 3, "title": "History of Java", "content": "## 1. History of Java\r\n\r\nJava was developed by Sun Microsystems in the mid-1990s and officially released in 1995. The language was designed to be portable, object-oriented, and user-friendly.\r\n\r\nKey features include:\r\n\r\n- **Write Once, Run Anywhere (WORA):** Java can run on any platform with a Java Virtual Machine (JVM).\r\n- **Object-Oriented:** Java promotes code organization and reusability through objects.\r\n\r\nIn 2010, Oracle acquired Sun Microsystems and has continued to evolve Java with regular updates.", "order": 1, "created_at": "2025-05-16T14:16:41.307Z", "updated_at": "2025-05-16T14:16:41.307Z"}}, {"model": "learn.section", "pk": 33, "fields": {"course": 3, "title": "Key Features of Java", "content": "## 2. Key Features of Java\r\n\r\n- **Simplicity:** Java's syntax is clear and easy to understand for beginners.\r\n- **Object-Oriented:** Promotes better code organization using concepts like encapsulation, inheritance, and polymorphism.\r\n- **Platform Independence:** Java programs can run on any platform with a JVM.\r\n- **Rich API:** Java includes a wide range of libraries and APIs.\r\n- **Strong Typing:** Java helps prevent errors by requiring specific data types.", "order": 2, "created_at": "2025-05-16T14:17:23.274Z", "updated_at": "2025-05-16T14:17:23.274Z"}}, {"model": "learn.section", "pk": 34, "fields": {"course": 3, "title": "Getting Started with Java", "content": "## 3. Getting Started with Java\r\n\r\n### 3.1 Setting Up Your Environment\r\n\r\nTo get started with Java, you need to install the Java Development Kit (JDK) and set up an IDE. Follow these steps:\r\n\r\n- **Download the JDK:** Visit the Oracle JDK download page and install the appropriate version for your system.\r\n- **Set Up an IDE:** Use IDEs like Eclipse, IntelliJ IDEA, or NetBeans for an enhanced coding experience.\r\n\r\n### 3.2 Writing Your First Java Program\r\n\r\nOnce your environment is set up, create a new Java project and write your first program:\r\n\r\n```java\r\npublic class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, World!\");\r\n    }\r\n}\r\n```\r\n\r\n### 3.3 Compiling and Running Your Program\r\n\r\n- **Compile:** In your IDE, use the \"Run\" or \"Compile\" button, or use the command line:\r\n\r\n```\r\njavac HelloWorld.java\r\n```\r\n\r\n- **Run:** Once compiled, run the program with:\r\n\r\n```\r\njava HelloWorld\r\n```", "order": 3, "created_at": "2025-05-16T14:18:59.765Z", "updated_at": "2025-05-16T14:26:51.480Z"}}, {"model": "learn.section", "pk": 35, "fields": {"course": 3, "title": "Variables and Data Types in Java", "content": "## 4. Variables and Data Types in Java\r\n\r\nIn Java, variables are used to store data, and each variable has a specific data type. Java supports various primitive and reference data types.\r\n\r\n### 4.1 Primitive Data Types\r\n\r\n- **int:** Stores integers without decimal points, e.g., `int age = 30;`\r\n- **double:** Stores floating-point numbers, e.g., `double salary = 85000.50;`\r\n- **char:** Stores single characters, e.g., `char grade = 'A';`\r\n- **boolean:** Stores `true` or `false` values, e.g., `boolean isJavaFun = true;`\r\n\r\n### 4.2 Reference Data Types\r\n\r\nReference types store addresses to objects rather than values directly. Arrays and objects are examples of reference types:\r\n\r\n```java\r\nString name = \"John\"; // Reference type example\r\nint[] numbers = {1, 2, 3, 4}; // Array as a reference type\r\n```", "order": 4, "created_at": "2025-05-16T14:19:52.959Z", "updated_at": "2025-05-16T14:27:03.611Z"}}, {"model": "learn.section", "pk": 36, "fields": {"course": 3, "title": "Java Operators", "content": "## 5. Java Operators\r\n\r\nOperators in Java perform various operations on variables and values. Here's a breakdown of all the types of operators:\r\n\r\n### 5.1 Arithmetic Operators\r\n\r\nUsed for performing basic arithmetic operations.\r\n\r\n- `+` (Addition) - Adds two values\r\n- `-` (Subtraction) - Subtracts one value from another\r\n- `*` (Multiplication) - Multiplies two values\r\n- `/` (Division) - Divides one value by another\r\n- `%` (Modulus) - Returns the remainder of a division\r\n- `++` (Increment) - Increases a value by 1\r\n- `--` (Decrement) - Decreases a value by 1\r\n\r\n```java\r\nint x = 5;\r\nint y = 2;\r\nSystem.out.println(x + y); // 7\r\nSystem.out.println(x % y); // 1\r\nSystem.out.println(++x);   // 6 (Increment)\r\n```\r\n\r\n### 5.2 Comparison Operators\r\n\r\nComparison operators are used to compare two values and return a boolean result (true/false).\r\n\r\n- `==` (Equal to) - Checks if two values are equal\r\n- `!=` (Not equal to) - Checks if two values are not equal\r\n- `>` (Greater than)\r\n- `<` (Less than)\r\n- `>=` (Greater than or equal to)\r\n- `<=` (Less than or equal to)\r\n\r\n```java\r\nint a = 10;\r\nint b = 20;\r\nSystem.out.println(a == b);  // false\r\nSystem.out.println(a < b);   // true\r\n```\r\n\r\n### 5.3 Logical Operators\r\n\r\nUsed to perform logical \"AND\", \"OR\", and \"NOT\" operations.\r\n\r\n- `&&` (Logical AND) - Returns true if both conditions are true\r\n- `||` (Logical OR) - Returns true if at least one condition is true\r\n- `!` (Logical NOT) - Reverses the result of a condition\r\n\r\n```java\r\nboolean isAdult = true;\r\nboolean hasID = false;\r\nSystem.out.println(isAdult && hasID);  // false\r\nSystem.out.println(isAdult || hasID);  // true\r\nSystem.out.println(!isAdult);          // false\r\n```\r\n\r\n### 5.4 Assignment Operators\r\n\r\nUsed to assign values to variables.\r\n\r\n- `=` (Assigns a value to a variable)\r\n- `+=` (Adds and assigns the value)\r\n- `-=` (Subtracts and assigns the value)\r\n- `*=` (Multiplies and assigns the value)\r\n- `/=` (Divides and assigns the value)\r\n- `%=` (Takes modulus and assigns the value)\r\n\r\n```java\r\nint a = 5;\r\na += 3;  // a = a + 3, now a is 8\r\na *= 2;  // a = a * 2, now a is 16\r\n```\r\n\r\n### 5.5 Bitwise Operators\r\n\r\nOperate on bits and perform bit-by-bit operations.\r\n\r\n- `&` (Bitwise AND)\r\n- `|` (Bitwise OR)\r\n- `^` (Bitwise XOR)\r\n- `~` (Bitwise NOT)\r\n- `<<` (Left shift)\r\n- `>>` (Right shift)\r\n\r\n```java\r\nint a = 5;  // 0101 in binary\r\nint b = 7;  // 0111 in binary\r\nSystem.out.println(a & b);  // 0101 (5 in decimal)\r\nSystem.out.println(a | b);  // 0111 (7 in decimal)\r\n```\r\n\r\n### 5.6 Ternary Operator\r\n\r\nThe ternary operator is a shortcut for `if-else` statements.\r\n\r\nSyntax: `condition ? value_if_true : value_if_false`\r\n\r\n```java\r\nint age = 18;\r\nString result = (age >= 18) ? \"Adult\" : \"Minor\";\r\nSystem.out.println(result);  // Outputs: Adult\r\n```", "order": 5, "created_at": "2025-05-16T14:21:29.880Z", "updated_at": "2025-05-16T14:27:18.428Z"}}, {"model": "learn.section", "pk": 37, "fields": {"course": 3, "title": "Conditional Statements in Java", "content": "## 6. Conditional Statements in Java\r\n\r\nJava supports several types of conditional statements that control the flow of execution based on certain conditions.\r\n\r\n### 6.1 if-else Statement\r\n\r\n```java\r\nint age = 18;\r\nif (age >= 18) {\r\n    System.out.println(\"You are an adult.\");\r\n} else {\r\n    System.out.println(\"You are not an adult.\");\r\n}\r\n```\r\n\r\n### 6.2 Switch Statement\r\n\r\nA `switch` statement can be used as an alternative to `if-else` when testing multiple conditions.\r\n\r\n```java\r\nint day = 3;\r\nswitch (day) {\r\n    case 1:\r\n        System.out.println(\"Monday\");\r\n        break;\r\n    case 2:\r\n        System.out.println(\"Tuesday\");\r\n        break;\r\n    case 3:\r\n        System.out.println(\"Wednesday\");\r\n        break;\r\n    default:\r\n        System.out.println(\"Unknown day\");\r\n}\r\n```", "order": 6, "created_at": "2025-05-16T14:22:23.571Z", "updated_at": "2025-05-16T14:27:29.895Z"}}, {"model": "learn.section", "pk": 38, "fields": {"course": 3, "title": "Loops in Java", "content": "## 7. Loops in Java\r\n\r\nLoops are used to execute a block of code repeatedly. Java supports three types of loops: `for`, `while`, and `do-while`.\r\n\r\n### 7.1 for Loop\r\n\r\nA `for` loop is commonly used when you know how many times a block of code should run.\r\n\r\n```java\r\nfor (int i = 0; i < 5; i++) {\r\n    System.out.println(i); // Outputs: 0, 1, 2, 3, 4\r\n}\r\n```\r\n\r\n### 7.2 while Loop\r\n\r\nThe `while` loop continues to run as long as a condition is true.\r\n\r\n```java\r\nint i = 0;\r\nwhile (i < 5) {\r\n    System.out.println(i);\r\n    i++;\r\n}\r\n```\r\n\r\n### 7.3 do-while Loop\r\n\r\nA `do-while` loop runs at least once, even if the condition is false.\r\n\r\n```java\r\nint i = 0;\r\ndo {\r\n    System.out.println(i);\r\n    i++;\r\n} while (i < 5);\r\n```", "order": 7, "created_at": "2025-05-16T14:23:18.821Z", "updated_at": "2025-05-16T14:27:40.882Z"}}, {"model": "learn.section", "pk": 39, "fields": {"course": 3, "title": "Functions in Java", "content": "## 8. Functions in Java\r\n\r\nFunctions, also called methods, are reusable blocks of code designed to perform specific tasks. Here's how to create and call methods in Java:\r\n\r\n### 8.1 Basic Function Example\r\n\r\n```java\r\npublic class Calculator {\r\n    public static int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int result = add(10, 20);\r\n        System.out.println(\"Result: \" + result); // Outputs: 30\r\n    }\r\n}\r\n```\r\n\r\n### 8.2 Function Overloading\r\n\r\nJava allows you to define multiple methods with the same name but different parameter lists, known as method overloading.\r\n\r\n```java\r\npublic class Calculator {\r\n    public static int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n\r\n    public static double add(double a, double b) {\r\n        return a + b;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(add(5, 10));      // Outputs: 15 (int version)\r\n        System.out.println(add(5.5, 10.5));  // Outputs: 16.0 (double version)\r\n    }\r\n}\r\n```", "order": 8, "created_at": "2025-05-16T14:24:14.675Z", "updated_at": "2025-05-16T14:27:51.765Z"}}, {"model": "learn.section", "pk": 40, "fields": {"course": 3, "title": "Resources for Learning Java", "content": "## 9. Resources for Learning Java\r\n\r\n- **Official Documentation:** The [Java Documentation](https://docs.oracle.com/javase/tutorial/) is a comprehensive guide to Java's features.\r\n- **Books:** \"Head First Java\" and \"Effective Java\" are highly recommended for in-depth learning.", "order": 9, "created_at": "2025-05-16T14:25:01.847Z", "updated_at": "2025-05-16T14:33:31.434Z"}}, {"model": "learn.section", "pk": 41, "fields": {"course": 2, "title": "History of JavaScript", "content": "## 1. History of JavaScript\r\n\r\nJavaScript was developed by Brendan Eich in 1995 while working for Netscape Communications Corporation. Initially called Mocha, then LiveScript, it was finally renamed JavaScript.\r\n\r\nKey features include:\r\n\r\n- **Client-side Scripting:** JavaScript is primarily used for creating interactive web pages.\r\n- **Lightweight and Fast:** JavaScript is a lightweight programming language that executes quickly in the browser.\r\n\r\nJavaScript has evolved significantly over the years, with ECMAScript standards ensuring its continuous development and improvement.", "order": 1, "created_at": "2025-05-16T14:33:53.946Z", "updated_at": "2025-05-16T14:33:53.946Z"}}, {"model": "learn.section", "pk": 42, "fields": {"course": 2, "title": "Key Features of JavaScript", "content": "## 2. Key Features of JavaScript\r\n\r\n- **Interactivity:** JavaScript adds interactivity to web pages, allowing dynamic content updates.\r\n- **Event-driven:** JavaScript can handle and react to user events like clicks and keypresses.\r\n- **Platform Independence:** JavaScript runs in any web browser, making it platform-independent.\r\n- **Versatile:** JavaScript can be used for both client-side and server-side development (e.g., using Node.js).\r\n- **Rich Libraries:** JavaScript has a vast ecosystem of libraries and frameworks (e.g., React, Angular, Vue.js).", "order": 2, "created_at": "2025-05-16T14:34:22.393Z", "updated_at": "2025-05-16T14:34:22.393Z"}}, {"model": "learn.section", "pk": 43, "fields": {"course": 2, "title": "Getting Started with JavaScript", "content": "## 3. Getting Started with JavaScript\r\n\r\n### 3.1 Setting Up Your Environment\r\n\r\nTo get started with JavaScript, you need a web browser and a text editor. Follow these steps:\r\n\r\n- **Choose a Text Editor:** Use editors like Visual Studio Code, Sublime Text, or Atom for an enhanced coding experience.\r\n- **Open Your Browser:** Modern browsers like Chrome, Firefox, or Edge have built-in JavaScript engines.\r\n\r\n### 3.2 Writing Your First JavaScript Program\r\n\r\nOnce your environment is set up, create a new HTML file and write your first JavaScript program:\r\n\r\n```\r\nHello, World!\r\n```\r\n\r\n### 3.3 Running Your Program\r\n\r\n- **Open Your HTML File:** Open the HTML file in your web browser. You will see \"Hello, World!\" on the web page.\r\n- **View Console Output:** Open the browser's Developer Tools (usually F12 or right-click and select \"Inspect\") and go to the \"Console\" tab to see the \"Hello, World!\" message.", "order": 3, "created_at": "2025-05-16T14:34:58.596Z", "updated_at": "2025-05-16T14:34:58.596Z"}}, {"model": "learn.section", "pk": 44, "fields": {"course": 2, "title": "Variables and Data Types in JavaScript", "content": "## 4. Variables and Data Types in JavaScript\r\n\r\nIn JavaScript, variables are used to store data, and each variable can hold different data types. JavaScript supports various data types, including:\r\n\r\n### 4.1 Basic Data Types\r\n\r\n- **Number:** Stores numbers, e.g., `let age = 30;`\r\n- **String:** Stores text, e.g., `let name = \"John\";`\r\n- **Boolean:** Stores `true` or `false` values, e.g., `let isJavaScriptFun = true;`\r\n- **Undefined:** A variable that has been declared but not assigned a value, e.g., `let x;`\r\n- **Null:** Represents the intentional absence of any value, e.g., `let y = null;`", "order": 4, "created_at": "2025-05-16T14:35:35.420Z", "updated_at": "2025-05-16T14:35:35.420Z"}}, {"model": "learn.section", "pk": 45, "fields": {"course": 2, "title": "JavaScript Operators", "content": "## 5. JavaScript Operators\r\n\r\nOperators in JavaScript perform various operations on variables and values. Here are the types of operators:\r\n\r\n### 5.1 Arithmetic Operators\r\n\r\nUsed for basic arithmetic operations:\r\n\r\n- `+` (Addition)\r\n- `-` (Subtraction)\r\n- `*` (Multiplication)\r\n- `/` (Division)\r\n- `%` (Modulus)\r\n- `++` (Increment)\r\n- `--` (Decrement)\r\n\r\n```javascript\r\nlet x = 5;\r\nlet y = 2;\r\nconsole.log(x + y);  // Outputs: 7\r\nconsole.log(x % y);  // Outputs: 1\r\n```\r\n\r\n### 5.2 Comparison Operators\r\n\r\nUsed to compare values:\r\n\r\n- `==` (Equal to)\r\n- `!=` (Not equal to)\r\n- `>` (Greater than)\r\n- `<` (Less than)\r\n- `>=` (Greater than or equal to)\r\n- `<=` (Less than or equal to)\r\n\r\n```javascript\r\nlet a = 10;\r\nlet b = 20;\r\nconsole.log(a == b);  // Outputs: false\r\nconsole.log(a < b);   // Outputs: true\r\n```\r\n\r\n### 5.3 Logical Operators\r\n\r\nUsed to perform logical operations:\r\n\r\n- `&&` (Logical AND)\r\n- `||` (Logical OR)\r\n- `!` (Logical NOT)\r\n\r\n```javascript\r\nlet isAdult = true;\r\nlet hasID = false;\r\nconsole.log(isAdult && hasID);  // Outputs: false\r\nconsole.log(isAdult || hasID);  // Outputs: true\r\nconsole.log(!isAdult);          // Outputs: false\r\n```\r\n\r\n### 5.4 Assignment Operators\r\n\r\nUsed to assign values to variables:\r\n\r\n- `=` (Assigns a value)\r\n- `+=` (Adds and assigns)\r\n- `-=` (Subtracts and assigns)\r\n- `*=` (Multiplies and assigns)\r\n- `/=` (Divides and assigns)\r\n- `%=` (Modulus and assigns)\r\n\r\n```javascript\r\nlet a = 5;\r\na += 3;  // a = a + 3, now a is 8\r\na *= 2;  // a = a * 2, now a is 16\r\n```", "order": 5, "created_at": "2025-05-16T14:36:09.896Z", "updated_at": "2025-05-16T14:36:09.896Z"}}, {"model": "learn.section", "pk": 46, "fields": {"course": 2, "title": "Conditional Statements in JavaScript", "content": "## 6. Conditional Statements in JavaScript\r\n\r\nJavaScript supports several types of conditional statements that control the flow of execution based on certain conditions.\r\n\r\n### 6.1 if-else Statement\r\n\r\n```javascript\r\nlet age = 18;\r\nif (age >= 18) {\r\n    console.log(\"You are an adult.\");\r\n} else {\r\n    console.log(\"You are not an adult.\");\r\n}\r\n```\r\n\r\n### 6.2 else if Statement\r\n\r\nThe `else if` statement can be used to check multiple expressions:\r\n\r\n```javascript\r\nlet day = 3;\r\nif (day == 1) {\r\n    console.log(\"Monday\");\r\n} else if (day == 2) {\r\n    console.log(\"Tuesday\");\r\n} else if (day == 3) {\r\n    console.log(\"Wednesday\");\r\n} else {\r\n    console.log(\"Unknown day\");\r\n}\r\n```", "order": 6, "created_at": "2025-05-16T14:36:42.800Z", "updated_at": "2025-05-16T14:36:42.800Z"}}, {"model": "learn.section", "pk": 47, "fields": {"course": 2, "title": "Loops in JavaScript", "content": "## 7. Loops in JavaScript\r\n\r\nLoops are used to execute a block of code repeatedly. JavaScript supports `for` and `while` loops.\r\n\r\n### 7.1 for Loop\r\n\r\nA `for` loop is commonly used for iterating over a sequence (like a list or range):\r\n\r\n```javascript\r\nfor (let i = 0; i < 5; i++) {\r\n    console.log(i);  // Outputs: 0, 1, 2, 3, 4\r\n}\r\n```\r\n\r\n### 7.2 while Loop\r\n\r\nThe `while` loop continues to run as long as a condition is true:\r\n\r\n```javascript\r\nlet i = 0;\r\nwhile (i < 5) {\r\n    console.log(i);\r\n    i++;\r\n}\r\n```", "order": 7, "created_at": "2025-05-16T14:37:11.113Z", "updated_at": "2025-05-16T14:37:11.113Z"}}, {"model": "learn.section", "pk": 48, "fields": {"course": 2, "title": "Functions in JavaScript", "content": "## 8. Functions in JavaScript\r\n\r\nFunctions are reusable blocks of code designed to perform specific tasks. Here's how to create and call functions in JavaScript:\r\n\r\n### 8.1 Basic Function Example\r\n\r\n```javascript\r\nfunction add(a, b) {\r\n    return a + b;\r\n}\r\n\r\nlet result = add(10, 20);\r\nconsole.log(\"Result: \" + result);  // Outputs: 30\r\n```\r\n\r\n### 8.2 Function with Default Parameters\r\n\r\nYou can define functions with default parameter values:\r\n\r\n```javascript\r\nfunction greet(name = \"World\") {\r\n    console.log(\"Hello, \" + name);\r\n}\r\n\r\ngreet();          // Outputs: Hello, World\r\ngreet(\"Alice\");  // Outputs: Hello, Alice\r\n```", "order": 8, "created_at": "2025-05-16T14:37:39.295Z", "updated_at": "2025-05-16T14:37:39.295Z"}}, {"model": "learn.section", "pk": 49, "fields": {"course": 2, "title": "Resources", "content": "## 9. Resources\r\n\r\n- **Official Documentation:** The [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript) is a comprehensive guide to JavaScript's features.\r\n- **Books:** \"Eloquent JavaScript\" by Marijn Haverbeke and \"JavaScript: The Good Parts\" by Douglas Crockford are highly recommended for beginners.", "order": 9, "created_at": "2025-05-16T14:38:18.277Z", "updated_at": "2025-05-16T14:38:18.277Z"}}, {"model": "learn.languages", "pk": 1, "fields": {"course": 1, "language": "English"}}, {"model": "learn.languages", "pk": 2, "fields": {"course": 1, "language": "Kannada"}}, {"model": "learn.languages", "pk": 3, "fields": {"course": 1, "language": "Telugu"}}, {"model": "learn.languages", "pk": 4, "fields": {"course": 1, "language": "Hindi"}}, {"model": "learn.languages", "pk": 5, "fields": {"course": 2, "language": "English"}}, {"model": "learn.languages", "pk": 6, "fields": {"course": 2, "language": "Kannada"}}, {"model": "learn.languages", "pk": 7, "fields": {"course": 2, "language": "Telugu"}}, {"model": "learn.languages", "pk": 8, "fields": {"course": 2, "language": "Hindi"}}, {"model": "learn.languages", "pk": 9, "fields": {"course": 3, "language": "English"}}, {"model": "learn.languages", "pk": 10, "fields": {"course": 3, "language": "Kannada"}}, {"model": "learn.languages", "pk": 11, "fields": {"course": 3, "language": "Telugu"}}, {"model": "learn.languages", "pk": 12, "fields": {"course": 3, "language": "Hindi"}}, {"model": "learn.languages", "pk": 13, "fields": {"course": 4, "language": "English"}}, {"model": "learn.languages", "pk": 14, "fields": {"course": 4, "language": "Kannada"}}, {"model": "learn.languages", "pk": 15, "fields": {"course": 4, "language": "Telugu"}}, {"model": "learn.languages", "pk": 16, "fields": {"course": 4, "language": "Hindi"}}, {"model": "learn.languages", "pk": 17, "fields": {"course": 5, "language": "English"}}, {"model": "learn.languages", "pk": 18, "fields": {"course": 5, "language": "Kannada"}}, {"model": "learn.languages", "pk": 19, "fields": {"course": 5, "language": "Telugu"}}, {"model": "learn.languages", "pk": 20, "fields": {"course": 5, "language": "Hindi"}}, {"model": "learn.languages", "pk": 21, "fields": {"course": 6, "language": "English"}}, {"model": "learn.languages", "pk": 22, "fields": {"course": 6, "language": "Kannada"}}, {"model": "learn.languages", "pk": 23, "fields": {"course": 6, "language": "Telugu"}}, {"model": "learn.languages", "pk": 24, "fields": {"course": 6, "language": "Hindi"}}, {"model": "learn.playlists", "pk": 1, "fields": {"title": 2, "list_id": "PLlGueSbLhZoBRnTsGiDJeTXuQCALOTN07"}}, {"model": "learn.playlists", "pk": 2, "fields": {"title": 2, "list_id": "PLlGueSbLhZoD_mUatMaJsVukJ2Re3JAUj"}}, {"model": "learn.playlists", "pk": 3, "fields": {"title": 2, "list_id": "PLQztdyH5OY4BPSqZE-dSAMPIMU_8iq-Xd"}}, {"model": "learn.playlists", "pk": 4, "fields": {"title": 2, "list_id": "PLUZkVL-W-8GKpo--HuELu27Lkc308fNXe"}}, {"model": "learn.playlists", "pk": 5, "fields": {"title": 1, "list_id": "PL9ooVrP1hQOE4KoZLUP4LgBwFH2IJCQs6"}}, {"model": "learn.playlists", "pk": 6, "fields": {"title": 1, "list_id": "PLdo5W4Nhv31bZSiqiOL5ta39vSnBxpOPT"}}, {"model": "learn.playlists", "pk": 7, "fields": {"title": 1, "list_id": "PLEiEAq2VkUUJO27b6PyoSd7CJjWIPyHYO"}}, {"model": "learn.playlists", "pk": 8, "fields": {"title": 1, "list_id": "PLS1QulWo1RIaJECMeUT4LFwJ-ghgoSH6n"}}, {"model": "learn.playlists", "pk": 9, "fields": {"title": 3, "list_id": "PLS8lzSv6JRJ2OC7KVp05jqtY4MgLsitdX"}}, {"model": "learn.playlists", "pk": 10, "fields": {"title": 3, "list_id": "PLC2mgeYbYNm-3aTUq98pbmrA3P1_m-aJR"}}, {"model": "learn.playlists", "pk": 11, "fields": {"title": 3, "list_id": "PLLOxZwkBK52Dx82C8mJXB0jhekCBQ5dLo"}}, {"model": "learn.playlists", "pk": 12, "fields": {"title": 3, "list_id": "PLbMVPNscUopRsjl_O6jce4apc1BoRYAYp"}}, {"model": "learn.playlists", "pk": 13, "fields": {"title": 4, "list_id": "PLu0W_9lII9agwh1XjRt242xIpHhPT2llg"}}, {"model": "learn.playlists", "pk": 14, "fields": {"title": 4, "list_id": "PLjVLYmrlmjGcQfNj_SLlLV4Ytf39f8BF7"}}, {"model": "learn.playlists", "pk": 15, "fields": {"title": 4, "list_id": "PLjVLYmrlmjGcQfNj_SLlLV4Ytf39f8BF7"}}, {"model": "learn.playlists", "pk": 16, "fields": {"title": 4, "list_id": "PLu0W_9lII9agICnT8t4iYVSZ3eykIAOME"}}, {"model": "learn.playlists", "pk": 17, "fields": {"title": 4, "list_id": "PLBGx66SQNZ8ZufRtlu7XdhMnqIVkQHv9m"}}, {"model": "learn.playlists", "pk": 18, "fields": {"title": 6, "list_id": "PLQztdyH5OY4BvjvmU0PV8nTevqXjYcYEE"}}, {"model": "learn.playlists", "pk": 19, "fields": {"title": 6, "list_id": "PLUZkVL-W-8GKrNbvY-XSLRbyKN_iWqqML"}}, {"model": "learn.playlists", "pk": 20, "fields": {"title": 6, "list_id": "PLUZkVL-W-8GJVkp8Az0SAWqmDPv5b2Tn9"}}, {"model": "learn.playlists", "pk": 21, "fields": {"title": 6, "list_id": "PLuEkadLSLDWGkR8-icsd_gWmoI4zSYVYR"}}, {"model": "learn.playlists", "pk": 22, "fields": {"title": 5, "list_id": "PLZPZq0r_RZOO1zkgO4bIdfuLpizCeHYKv"}}, {"model": "learn.playlists", "pk": 23, "fields": {"title": 5, "list_id": "PLZPZq0r_RZOMRMjHB_IEBjOW_ufr00yG1"}}, {"model": "learn.playlists", "pk": 24, "fields": {"title": 5, "list_id": "PLGjplNEQ1it_oTvuLRNqXfz_v_0pq6unW"}}, {"model": "learn.playlists", "pk": 25, "fields": {"title": 5, "list_id": "PLsyeobzWxl7qtP8Lo9TReqUMkiOp446cV"}}, {"model": "learn.playlists", "pk": 26, "fields": {"title": 7, "list_id": "PLZca26lQcxTplSgALWexhmuE6L1d3oDm5"}}, {"model": "learn.playlists", "pk": 27, "fields": {"title": 7, "list_id": "PLWnZ0qt0PImX-tA6I1tFQW8SDSDKHvV-2"}}, {"model": "learn.playlists", "pk": 28, "fields": {"title": 7, "list_id": "PLzdWZT-ZJD08NwOPGEGzy9jg5wwe_Wylj"}}, {"model": "learn.playlists", "pk": 29, "fields": {"title": 7, "list_id": "PLbMVPNscUopQdZU8iO4JWXxKBhmkze00M"}}, {"model": "learn.playlists", "pk": 30, "fields": {"title": 8, "list_id": "PLu0W_9lII9ahR1blWXxgSlL4y9iQBnLpR"}}, {"model": "learn.playlists", "pk": 31, "fields": {"title": 8, "list_id": "PLu0W_9lII9ahR1blWXxgSlL4y9iQBnLpR"}}, {"model": "learn.playlists", "pk": 32, "fields": {"title": 8, "list_id": "PL0b6OzIxLPbx-BZTaWu_AF7hsKo_Fvsnf"}}, {"model": "learn.playlists", "pk": 33, "fields": {"title": 8, "list_id": "PLGjplNEQ1it_oTvuLRNqXfz_v_0pq6unW"}}, {"model": "learn.playlists", "pk": 34, "fields": {"title": 9, "list_id": "PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5"}}, {"model": "learn.playlists", "pk": 35, "fields": {"title": 9, "list_id": "PLS1QulWo1RIbfTjQvTdj8Y6yyq4R7g-Al"}}, {"model": "learn.playlists", "pk": 36, "fields": {"title": 9, "list_id": "PLacgMXFs7kl-zv91MY_CDwzToOEiXDcsw"}}, {"model": "learn.playlists", "pk": 37, "fields": {"title": 9, "list_id": "PL9ooVrP1hQOEe9EN119lMdwcBxcrBI1D3"}}, {"model": "learn.playlists", "pk": 38, "fields": {"title": 9, "list_id": "PLBlnK6fEyqRjKA_NuK9mHmlk0dZzuP1P5"}}, {"model": "learn.playlists", "pk": 39, "fields": {"title": 10, "list_id": "PLQztdyH5OY4CDwFMXl2_oELN7_bki_uPJ"}}, {"model": "learn.playlists", "pk": 40, "fields": {"title": 10, "list_id": "PLdjoCUa5gxgfptzJ8SA7kUFyehmsluxBr"}}, {"model": "learn.playlists", "pk": 41, "fields": {"title": 10, "list_id": "PLVPTrKocvCTH8vvDwfHPsZftxXSGM19Mw"}}, {"model": "learn.playlists", "pk": 42, "fields": {"title": 10, "list_id": "PLgfNsCf7RQxc8LupsExTLS7NCvhsmF0DH"}}, {"model": "learn.playlists", "pk": 43, "fields": {"title": 11, "list_id": "PLacgMXFs7kl8wrP2mPyJgsWVk-FP31qq1"}}, {"model": "learn.playlists", "pk": 44, "fields": {"title": 11, "list_id": "PLz8gl4BEGkEGYXNZrIRHJUSoxS_FPBrDy"}}, {"model": "learn.playlists", "pk": 45, "fields": {"title": 11, "list_id": "PLbMVPNscUopQ9GgcopBgMG7_ISsC_OZGr"}}, {"model": "learn.playlists", "pk": 46, "fields": {"title": 11, "list_id": "PLNgoFk5SYUgmv-wv3aOupxr82c53KJDOB"}}, {"model": "learn.playlists", "pk": 47, "fields": {"title": 12, "list_id": "PLu0W_9lII9agS67Uits0UnJyrYiXhDS6q"}}, {"model": "learn.playlists", "pk": 48, "fields": {"title": 12, "list_id": "PL8p2I9GklV466xs0qGUvLGAXy6xLyEcQy"}}, {"model": "learn.playlists", "pk": 49, "fields": {"title": 12, "list_id": "PLmRclvVt5DtnqhXTJwd-oqVRwO3bLZCGV"}}, {"model": "learn.playlists", "pk": 50, "fields": {"title": 12, "list_id": "PLlhM4lkb2sEhfuXL-2BDrJ67WkUdQ2v9b"}}, {"model": "learn.playlists", "pk": 51, "fields": {"title": 21, "list_id": "PL98qAXLA6aftD9ZlnjpLhdQAOFI8xIB6e"}}, {"model": "learn.playlists", "pk": 52, "fields": {"title": 21, "list_id": "PLsyeobzWxl7oBxHp43xQTFrw9f1CDPR6C"}}, {"model": "learn.playlists", "pk": 53, "fields": {"title": 21, "list_id": "PLBlnK6fEyqRggZZgYpPMUxdY1CYkZtARR"}}, {"model": "learn.playlists", "pk": 54, "fields": {"title": 21, "list_id": "PLdo5W4Nhv31a8UcMN9-35ghv8qyFWD9_S"}}, {"model": "learn.playlists", "pk": 55, "fields": {"title": 22, "list_id": "PLjvPj4x59YBUYkNJr4kCKOXsP3NyM4-ik"}}, {"model": "learn.playlists", "pk": 56, "fields": {"title": 22, "list_id": "PLUZkVL-W-8GLVwteCNH_HNoIAhbfBHnLb"}}, {"model": "learn.playlists", "pk": 57, "fields": {"title": 22, "list_id": "PLgfNsCf7RQxeWqNwa4dk00V6BMpIf8t23"}}, {"model": "learn.playlists", "pk": 58, "fields": {"title": 22, "list_id": "PLra4Wd_0FhuN7AiVvVvI4qw8LbUc9B0NA"}}, {"model": "learn.playlists", "pk": 59, "fields": {"title": 23, "list_id": "PL3KKfF5A0sSKZutcrUiTCQDX0hn7Tw61E"}}, {"model": "learn.playlists", "pk": 60, "fields": {"title": 23, "list_id": "PLqWcha_6aXDvP3cXVqDT7LWVx67M-vO4G"}}, {"model": "learn.playlists", "pk": 61, "fields": {"title": 23, "list_id": "PLTwyxIFuXAzxO9VHmpcyEZarLxiSyT_34"}}, {"model": "learn.playlists", "pk": 62, "fields": {"title": 23, "list_id": "PLNgoFk5SYUgn5L4ocsA6FTvqKLSzp_8wF"}}, {"model": "learn.playlists", "pk": 63, "fields": {"title": 24, "list_id": "PLu0W_9lII9aiXlHcLx-mDH1Qul38wD3aR"}}, {"model": "learn.playlists", "pk": 64, "fields": {"title": 24, "list_id": "PLxgZQoSe9cg1drBnejUaDD9GEJBGQ5hMt"}}, {"model": "learn.playlists", "pk": 65, "fields": {"title": 24, "list_id": "PLZlEBHEeC6tWlBMGaw-BEKM9XdJzavjB2"}}, {"model": "learn.playlists", "pk": 66, "fields": {"title": 24, "list_id": "PLjpp5kBQLNTQyQLdiHc7uGB2ieoh5E5JJ"}}, {"model": "learn.playlists", "pk": 67, "fields": {"title": 17, "list_id": "PLdo5W4Nhv31bbKJzrsKfMpo_grxuLl8LU"}}, {"model": "learn.playlists", "pk": 68, "fields": {"title": 17, "list_id": "PL9gnSGHSqcnr_DxHsP7AW9ftq0AtAyYqJ"}}, {"model": "learn.playlists", "pk": 69, "fields": {"title": 17, "list_id": "PLqleLpAMfxGAf5rrWdm92WMK3-gsrxgz5"}}, {"model": "learn.playlists", "pk": 70, "fields": {"title": 17, "list_id": "PLBlnK6fEyqRj9lld8sWIUNwlKfdUoPd1Y"}}, {"model": "learn.playlists", "pk": 71, "fields": {"title": 18, "list_id": "PLlGueSbLhZoCNnEEoeOXICh0k4wz0hG-V"}}, {"model": "learn.playlists", "pk": 72, "fields": {"title": 18, "list_id": "PLwtDJD0gVvlUtHfcAma6QfNZcW3Kn8I3v"}}, {"model": "learn.playlists", "pk": 73, "fields": {"title": 18, "list_id": "PLdo5W4Nhv31bbKJzrsKfMpo_grxuLl8LU"}}, {"model": "learn.playlists", "pk": 74, "fields": {"title": 18, "list_id": "PL1LUs2bHmGx6lmwnSl9u0pHD7UVcHdcyu"}}, {"model": "learn.playlists", "pk": 75, "fields": {"title": 19, "list_id": "PLjzLBp9HHZWhVXBSPS1VqxXXDoVk07gd9"}}, {"model": "learn.playlists", "pk": 76, "fields": {"title": 19, "list_id": "PLjzLBp9HHZWiJrhfJzTAEbwdpQIfUXtwP"}}, {"model": "learn.playlists", "pk": 77, "fields": {"title": 19, "list_id": "PLNgUoiw7tLC4Yu25xjnhC5P2OTD1rih2N"}}, {"model": "learn.playlists", "pk": 78, "fields": {"title": 19, "list_id": "PLLOxZwkBK52Akgqf4oSWPOQO9ROWS_9rc"}}, {"model": "learn.playlists", "pk": 79, "fields": {"title": 20, "list_id": "PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi"}}, {"model": "learn.playlists", "pk": 80, "fields": {"title": 20, "list_id": "PL0zysOflRCel693wumX2pbb-Zvi-5Ctea"}}, {"model": "learn.playlists", "pk": 81, "fields": {"title": 20, "list_id": "PLf0LpPWikpPfA_vez2NndnYuQy6WkpTzc"}}, {"model": "learn.playlists", "pk": 82, "fields": {"title": 20, "list_id": "PLPbgcxheSpE3NlJ30EDpxNYU6P2Jylns8"}}, {"model": "users.profile", "pk": 21, "fields": {"user": 26, "name": "sid", "gender": "M", "bio": "nothing happening", "phone": "6465466566", "image": "profile.png", "deactivated_at": null, "email_verified": true}}, {"model": "admin.logentry", "pk": 238, "fields": {"action_time": "2025-07-01T08:36:35.765Z", "user": 26, "content_type": 5, "object_id": "1", "object_repr": "sidram", "action_flag": 3, "change_message": ""}}, {"model": "auth.user", "pk": 26, "fields": {"password": "pbkdf2_sha256$1000000$3XEIDMIDzHQvhllTEB7HmT$ksJ1PD2LME5o73OfNMFopPTg0B0AP/PJGxFuOxFuEmw=", "last_login": "2025-07-01T08:36:03.930Z", "is_superuser": true, "username": "sidram24", "first_name": "", "last_name": "", "email": "sidramjv1024@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-07-01T08:27:09.144Z", "groups": [], "user_permissions": []}}, {"model": "sessions.session", "pk": "0d9feikq13h2w50h4m81e3rjew3lt1ao", "fields": {"session_data": "e30:1uIo3V:-Ab8l81Y71_BGR2cL0fRhRjQrdyGTFEaFSCvlHoyQzQ", "expire_date": "2025-06-07T12:32:49.924Z"}}, {"model": "sessions.session", "pk": "12gn3o8v8o3scej3xzml8q2kfp6hv10m", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOzIl:xf33iqIiEoZRR29eL4FNbs10KJOxNVdEzZY3howPmtY", "expire_date": "2025-06-24T13:46:07.264Z"}}, {"model": "sessions.session", "pk": "1fep1vd06xwqfca9x7ov6dreuumjrpvb", "fields": {"session_data": ".:1uO5TS:3H3i6DZO8QoeG7SAlVgW0HrsQN9fUi_B7khnXFgjKL0", "expire_date": "2025-06-22T02:09:26.696Z"}}, {"model": "sessions.session", "pk": "24au9h4qbl50ejd6estuc8rfmds871ns", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uVyav:U3XDcaCdUsvjRW3lozfI6rmE2lkTZui_uWuJ8m8LlnE", "expire_date": "2025-07-13T20:25:45.911Z"}}, {"model": "sessions.session", "pk": "2d9yz8tmaphywoyzgs8ificx9sj5l3tl", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uWB4P:wsy-SmIKVSTOhQ-EcPOMr0bzPRyr9JyFvECBKBFaCDE", "expire_date": "2025-07-14T09:45:01.090Z"}}, {"model": "sessions.session", "pk": "2puwblzyfw53thucw9tqwqu49fj0a02f", "fields": {"session_data": "e30:1uIiQN:UCWY6CHHjlSvpPN4vTrhMmb600_0Iz2v__yV7ZhUpVA", "expire_date": "2025-06-07T06:32:03.885Z"}}, {"model": "sessions.session", "pk": "3q85q5g3lbiqdkpjaeq8sen10tp55oyy", "fields": {"session_data": "e30:1uU8hp:NgHKdIFZ1_t4M9Epe9DWfVz9uXY9tluXA32dG7FyiNo", "expire_date": "2025-07-08T18:49:17.989Z"}}, {"model": "sessions.session", "pk": "4lcl5tifhbnnvi8879u57df8mkyj8xuu", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uWCcL:uWp5VyDJrTL7tiOdcdzUm9DTsFGc34JDc54nxYhUMhc", "expire_date": "2025-07-14T11:24:09.071Z"}}, {"model": "sessions.session", "pk": "4x16si9qwqndfq1kk2gjqicd5tnmba0a", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOfZ4:L_CllUZ0qAEqaKCh6gZLHdKGl_72QlVk3Vjz7KkM-uE", "expire_date": "2025-06-23T16:41:38.690Z"}}, {"model": "sessions.session", "pk": "72gtz4gc3f1nngzaq1a6wz2f6k0o15lt", "fields": {"session_data": "e30:1uIiSR:hkAfkUbDpuXzrmwEA5NN6F2Hm5dHQSKAivxEwNaIeoM", "expire_date": "2025-06-07T06:34:11.249Z"}}, {"model": "sessions.session", "pk": "827rzlwjjr8wi8huvght12r6sucsze4f", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uWCZ0:VFGiGKGgYOFrRl2QDmt_5WALfHUILHeLIogSMvYaCbA", "expire_date": "2025-07-14T11:20:42.152Z"}}, {"model": "sessions.session", "pk": "944ojf24ze3o3ndi45xe7p9rgupt2tr7", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOUTj:sB-ukTd7iDTaZz9t4tb-gEt-MEm3K1AvL7qvHqdn5g8", "expire_date": "2025-06-23T04:51:23.510Z"}}, {"model": "sessions.session", "pk": "9bmecxce8z7mmqxsx46i5xl0yndgs8dr", "fields": {"session_data": ".eJyVVF1r4zAQ_CvbvPQumNAklzTtS-G-aKFwhQv04VLC2lrHIrLWSHJTU_rfb6W4aa9cD-7Rq9HszGjXj4M1tqFat57cWqvB-WA8yF7Xciy2ZONB_PSj_tuPvtWozef-9I8rFfpK8LOzYro4oXJypmZjmqvZZLqYTk7HJ2p8NpuUpyfj2SRX5VzN54s5lYszheP5uMSJlKfzTwshLSoM60r7wK4bnP96HDg21EuR4wZd8Kke6CFIvelCxXbwdPeUHbDovRCgDX-78GOLXQYdt-BRK1j1DKvBCGApzY89IDSOQuggd4wKhCpQTTYcAdwkMOgE4h25sjWAVsG9JIVBG5K7vHFY19puwKDdtLihESwZKjIN1AQbfU9JAELNjkCsRRZHvmHrKYNAxkTgTuRE4LECo7cEgWFreQfsQDHsdKh6PSL9uxTpAevGCAG61OB8ZVd2CADD4TWhs1HR_sLFcAgfrkrwnO279DfEq2s3GxORkf8C4CunA0uk9g5SX9_ZgA8ZFGwLaoLPoigE31ChS13EEHJD9cXHgwDmbWQtBdeHKIa5dQX5pOY6OWzl3TUa4VNctDF0CZVtojc6d-i04A-sS9dFUgnGs5FU8bnx63QS_Y0h9ASKfOF0Lp0qOmBjxOI_vCWTZ0XbiUeVwjmONeMIVQc7p0MgOzoo-dI6za2MRc5t2Gf6Mivywio6T0puKRcZ92S4if7EKQZJrtAkUWYQ9TVBhGRQY1FpS2D6x8uAQjF6cX8rI57kUnTet0tq-0lI_ZbvTZMkkMDCoPiVE65laV5mJZ6jZYG7wzwL8TP8J9cUqggnIwGLI-3IdAmxsktpkoZcW_Ffp8dM85SWoI7DLohctk3Yr6BAC_vtjaDR6s1iv_cTqPR__AAudezp6AguZZdix6v9YEdZgRV2F3Abs9pxa1Sq_nv7ZEmuKcSI0_lu_xPZ-3Qg_wHVG7l7-g1YBOD1:1uVXb6:qHsH5PtSEtTBzEFRnq8zS9gxdNz1g20Uk7r7Ey_pfsU", "expire_date": "2025-07-12T15:36:08.518Z"}}, {"model": "sessions.session", "pk": "9svegcp5uiwjvpy39egdve9d6vxnvqz8", "fields": {"session_data": ".eJyVUs1OwzAMfhWTyy7VHmCXSYgDO3FEiE7INIaEtnGJ3Y0K7d1xyo9AArGdEkVf_P351TUB9S5EUc6TW92-uswduZUbhbKr3IBZZX5XelF7D9EdtofqC4ci9hmT_ga-anE6g82ih0zoJ1C2iwyc_BIueQ8NJthAoG6Aicc1XHA5IeCOAOF5JNHIqbK7orQVcAbhnjTE9AjUCRX4wkMXW4KeynzP6zr9lPiXFaWufEJ44pZOcHUdJqNJCwVpIiU1pIDmURRQuZc11KlO59SgMYMGmqBHEzgOQDvK0yz_7FiV0WZbP6fLvCGpCjsMmXaRRwGDKvWmuIL6CBf_OnBgumJSSp58Cf_-M80lbBSGDicBTrMIz-N9V0rCVMrjh3dpIaMx1O5j_LJ2x-bCLViB7w0mtmHZqE7JpyxnZcuXaSHfR6xKe3M60c8ipcFMTbZ93cdkSMA9Zr_-XrKh9mheRy10vjg0aKntIVLnP8reHt4AHrsycQ:1uDTkV:ensB0SQQjeo6t1DX5klhB_iY9aeypRd3FID7jkTZ62Q", "expire_date": "2025-05-23T19:51:11.649Z"}}, {"model": "sessions.session", "pk": "ayqpn5iw59rq7k0e4rrgc47rqk23r2xu", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOdZx:GKyghgPEBZumWonTZN5g6pDn31pZ6PnatZj3iTbuzY4", "expire_date": "2025-06-23T14:34:25.823Z"}}, {"model": "sessions.session", "pk": "bhdbsi7sf8gkppw46lhtf3v3a162ejrs", "fields": {"session_data": "e30:1uUTkF:MeVwj9vRUwNlAWfyDp02pjATn1YfnL54q63HxKt_oMI", "expire_date": "2025-07-09T17:17:11.491Z"}}, {"model": "sessions.session", "pk": "bxeyde3pnlboe77o59dpe51jr21u1er1", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uW7H8:z0szh3gFBqsKomvEHe9-9lhof02ZYHIsDjRCV-XXTVw", "expire_date": "2025-07-14T05:41:54.377Z"}}, {"model": "sessions.session", "pk": "c0y44uq2q34d2mmfyjw4u7kgkwdndosa", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uVtPL:wwskZh62b7vkfcQ-CVJJND5yWSopvaVxXOcaZxRa6m0", "expire_date": "2025-07-13T14:53:27.814Z"}}, {"model": "sessions.session", "pk": "cgd1se50gpc2z6yagns8ktksu0i6o9ck", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hCYAi0u3XsGMgyDVA0kpV0Z765NutDtf-_9lwi4rSVsnZcwJ3EWoMTpd4xID647SXestyap1XWZo9wVedAury3x83K4fwcFe_nWqBIlQ5zRupyctX5SGdlwNOOgEYyKo3UamDTFTHbwk48M4I0F5wcl3h8tDTgx:1uV90C:Rch219BGAtGzAP4WmBcVxxMJl9GSeG6J5mYjRW8w6yY", "expire_date": "2025-07-11T13:20:24.861Z"}}, {"model": "sessions.session", "pk": "ckpsy5mckkkhtikqgh2431yrgvh1soyd", "fields": {"session_data": "e30:1uIiTD:NUgaKJW0VACS-pcI7SjkzpoAl-e9krpDrzVvO2_hsCc", "expire_date": "2025-06-07T06:34:59.162Z"}}, {"model": "sessions.session", "pk": "d4qhku7mrecynmz6bbqzy2h5nngzz9q2", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uPYGQ:fhdY5aP3mig62R_P9zTFsw3pN2F_1tIFNya9sXkZtVw", "expire_date": "2025-06-26T03:06:02.240Z"}}, {"model": "sessions.session", "pk": "d6gwszr62923qpvsaajgz8aaoyi80t2e", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uVvP3:DKgVXD6Vms4BMvkGo0RyMMSNIT-z0Ww_CprZz0Ac13U", "expire_date": "2025-07-13T17:01:17.349Z"}}, {"model": "sessions.session", "pk": "dqbfzn9j9xyl4afbi30zvvw0yg5y05mx", "fields": {"session_data": ".eJx9VNtu2zAM_RXOLwGCLGvSJU37UmDrbtit2AXDMBcFLdGxVlkyJLlpUPTfRzpO1nTFHgJHFHV4eHik2-wS21RdtpHCpdHZSTbJRvdjBaorcrIhyzju13H8qkZjX_S7e0cqjBXnz47V4eKAyumxnk1ormfTw8Xh9GhyoCfHs2l5dDCZTQtdzvV8vphTuTjWOJlPSpxy-HD-fMGgqsJ0WZmYfFhnJ79us-At9VR4u8GQYhdPdJM43qxT5V12d3E32uVijAyALj124PMVrkfwblBDINTrMfz07eCaoAn-2mjSkKpuUTcJ8h4-zwCd5qVg5NkY4AfTBO1h7VtYcSWoCZKXyMqkijF427jShxqT8e4U4C0FAuRf9JzbeOZYGGuSoTjq0AUqVr61TIGsFcRVZVQF3pFsDjRYc0W7Sie5y90QAIbDN-QoYCI47-iC8pq4PcshLclCW3pSxFXd8mQ4hNc-AN1g3VgadUpwHHCTWRoJRsKgKglzG9BgShQcc63RmaZlbNmKKfCHo5TUeEvn1U1j0biezSBCxf1ZSfflpoLGhMLizETVxtjDgC9-k0qM9t0Z6YFhHX9565mmzZ_9SueboW07iVKg8cIubLWwpggYWOWuja46OrRrtogwgI_kZELw6cO399x0gy_ZHixoNPV-ra_tckkxsVjRt0H1gJZVcsK9L_eI1F-Yel3znYHUsq0NWu5Qe9VyLHX2GEHh_dUDFc827qqQzYlMjJQpjRLswlL90HnRW85r4z0qYiqhczocPsC8d07x7BP1k39aYGTHLLHeh_ovwnJrvs7Y_SQ2OvyDkbtzFizSzuG1l1tR-Dax2fnOiM85YlmO3nnj-1btPJ9nj2u9S-r8zC2JjzsVlG-ZrlzslQ865pmA7Lt06-Quv7ffJu_v-B51VBT_yCR3tuqOOXlhVmjS9gJxZ4GfBC7TKpl5fJJ3z9bF3R-kAPC0:1uVXFX:4GkSZ9fi916PoosOeEUMTgAq8rAcoAZwwZfIU0F1oxQ", "expire_date": "2025-07-12T15:13:51.487Z"}}, {"model": "sessions.session", "pk": "fs2k0s8qpgotort9q9ztaf1bg1xii04r", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uVTSQ:c6moD7TTKhxXpPeHsI8M2Tm7r8kLG_z8Qw5hUOjlCbc", "expire_date": "2025-07-12T11:10:54.790Z"}}, {"model": "sessions.session", "pk": "gbupkfyuxpzqrmbbdhnmqf316c8uul3r", "fields": {"session_data": ".eJzlWmt32kyS_isdZ2bizBqMwNw8H7IYYxvbXMzFjj15j08jNaAgJEUXYzJ597fvU90SSAh73pnd_bTn-ICRuqurquvyVHX_4-CZh8H8OfSF92waB6cH2sFR8tmE6wth0wv66eej336-teSmdRa9TU2Zc3-O8eW6XqoVxLRYN8qaqBjlYqlWKla1gqHVy8VptaCVixNjWjEqlVpFTGt1g2sVbcqLeFyqnNRAVJ_z4Hlu-oHjrQ9O__6PA8-xRMQKXrvcC3z5PBCvAZ7PzYPff_v9aDOO-z4mczvYN7j9acnmwhMscPBtuWxlBnO2dkKP6Y5h2jP2IxR-YDq2n2dNJ7QMeslcz3kxDcGWDqYaIoAWfMYnThiwFdilMZ8MZpkLSdgS3LOZ46l3mDuxxFKOoYW9NS2DYb5jvYgvaebfFNJZMY7ZIPL_Qdp_ZUuvzA_sCurRuc3aSkwSInAMvv7CbkXAloItbIzYMA_GVo63IM6cLetpsQzT10PfZ56YcU_qSqnsCJJMgxWXqnkRluMuhR0cERVur4M5jfSExQNh5BltgCe4sSaKSgpa5sM3mwT8Dcbu2EoMyCM9cfEjOC8brl1vki8EZiAV0AdhcDrFImdiZto2vJLlIBypvqm2Uu5tNNC0mQalhKRdQ_i6Z7q0y6CkpkTDJtw3dZ9Gfw_BmcbmmPKB9YU3FXogl5tsljPBqQdrEQZNaLQhrhHpJM--hcUK11jfCv0jNoPOK7AeO5j7zJliteace0t2MWi1FJv5fP6A9leK7E19_X5YeAkmq4TIKUZz7CK0LDJRzxc7avj7KESoMLn1W0bYEcIIWJSTViYIzMwX6UOMsykRhEyeY4Q6jacf2CQ8BcvBXGCiRx-2LtxAKsmVzOTZhWNZ5I-WE6udhpPLOL7UClkS6EwE1kmJ-hzeedeF0eLJ0rO7-6aI728iDW20j9iS6zA-ofxRGiqxshKTpJ3G7EIv8c7mpp6JcG6tI019YJdv7F9KlIHz3Bnqo_Pp-OStXYPKejbolgqsY9phIHx2GAvF4l37nJGubSsGpUKlC82cKIhAo4GQcs6Uk2e2KYg8mdkChoop0vPxTUaJGOKR_UolhD5R6Ud7CgMuT6rQue4gXKQkDYrPd8WzwU_Rar27aSBRrZx8C6eiMGW_2D2HeIiFPvsLX7p_Y-c84Gy0dvHgFzxXD0Lwre23WSt6veI-9tUQimPOLCegDbGcl_RqXYeUm-K6cPMsni6H5a4_3h9IorDRJrd-McWKAkrrRXhRDEvq8AY6zDA6DwLXPz0-xqAAYUDkTecYJBrYpAAkwbuMeq4nXAqW-5dszoW-oMSyXDMfuofFwtZgINYp-88uKGOKaPfYOaKx4xmnaRknhXqJ_2g8mf2kjN9Co1Yy8KlX6tBSoWBsn0wmbG8sja3xTWNE3HNzk3WOvpMkYi_6BNOLaBxFKZFyNmmRElPS-pAiZx5fLkkVpr2xwJTZHyGVIV-EGVusuX3j5tF1Vu3srsZCvJEntl5ZlrkBofNifHvLmr3xYNjKRs9Lj08UWJh6QrD2CMZuG5zCCAcgGDjcWHL3lMWGMDGDvLU-Ll3el7vOml0h_Pi5nh0H4A1UUE67dC0RCDY8v22Cw6nnLCmZyGEpie_1fu-pXl3XnUZS4serUa_Lxl1wVWa9bosNr3ojNkPaJbvTLShPOlo0sA_MymciG0r_XULsgQd6FElJ3ZQ3_HDynfJmin_7dnD73NXtm1wyTl5x7wWwgjWH5QLZqFb3yS22yQhq6CfsJJnc5fiSijxjGxnN881gHQWh93NF0vSkymM-tnRgiAHAzwtEjPCfcBHDZXKknQN1c2bL3GLSHkpzkCwjMFG24a7r78ny5mtdH_Czxb0o_PPUJw1u67UFgx0WC8WTbK5QKZl9jH2PfdwCloh2kPSKzdtPCgBEtknE2V933QQQCq7x17Qcs8fzu9fp98FVIwnQOkiW63gq4O9Z6OucGQ5rfgsLBaFZpg5b51A-nslHdeawTuv2qjdgF6a1JMVCA0v1zjAxmbOr9nBED4zSoN34osYhVvX67KNWyejiX-LhUKtXy59jVsIlxsGQ1QKG9M8tJyj6CAf7rjADTuPAGhVoNGJagm7zrINExaemDTUbOyGrflut3rVe-8t2IaUwQ2yVbTkz7MssI1IjfrPZxTxrIJJSjnYBCoC7XQ9fFFsDaYo-lUn2p4AJ2wln8zx7mAtboYLAXErBhL8Nu0cyQvtzWft4BC2kmZChT0LTCjAwJczD5fV12wvsqbt434pzTCtGUfZXLOXFTlhOjt8M2gTxX6xlAAMseEYr0fN4RkThcOyTBUH93w4ee-PR-KxVLHw7-LyTM19uf4ymxUnl8mn1hzPIr0wG0fJRDtmPXxR0M98ELyr4NFybg2PLEjPy9gSeaahSl6o0gFMjKj5di-tqk49lMWL7c9P1vyAUwwJ2oEbaZ0ulXPDY9qs_x6kYDNRLttXot7fwPiPQvYmwuEly-pybEu3AkDaBP6r3IC24gvpQA-H1MrQpLlNFSkVj6OlCpTjgJdilsCTUBN9Ek3FVlIujNOvTeuO7eNa7z83HBOsSSw4DL5QwURUdDWuGvQvmSz8FbbF5HZSw7F5uyS92PmxszV9FOblb2XDCfZIGhAxazU-vxrermb70l4WQeG-FpzRJTKembsrSGGHIIiSsKhIHCyzNn8JQyoiyGaIMlaBTVUYD-7imXDuljNK19np2W_15_XWWtV0EtafWoMe4w65l0OTdNoJrjvVgjyhwhOF4UXCD3SIqIvQ2OtDIQIVH1wQFBdWHiJ7C9hyLy1dV-VnKqujM8SjAIp1yL9Yo6I87DXbfevrCugLgIXIGmLAH8IToSZ2JuPJM0SfWFZVThqxsKr5ehAl7clxBcRsSkG3ZBnTr2Jze7KCleXhze3LiV_bUKg2fXWBToVzWd3zfxJbsAYf_VS3H5VoWErZGrPOoCvlh72L00Bi02HnrvnXb63da3RG7HLfPW4xt3CXwuEnFaD4Q-pziAPY-b4vgmDJ8bhZSm0lGDHcnWXNzSZpS5V5axmvx0354rp5bZ3uQRE9BsB7VtOSSSRB12Ov1P1Pcfbe4_j-RMQb3Mf5gjuLTiflMx6vpeavIq52b7413YnQ6nWCFKxN2wQ4fKNzKivDzFkMZxXIW-yqCY0MsY_i4RfMzBzW_t86b9nG0N9QWCBIdFaTUeuHPqjQLEYHNqYzZIWF9WcSa9iJtXT1bRHFoN6_m7sX9j8rJxWyV3NOmclRVKzjkWpt-EHm78KTLNF64rfxIAhsVtyRwz-LF_zFF8ukgDiHb6XpM8cXR5UwOHOxR1PGUF1P-g42EqB12Gin3FZHTBjeaeZd22XmwC9i31VdGrnOPOlu3rXOVbC_77Z4MhpY58bi3pjbnADF1IrClrG8mlu8YuUE3Vwim4SpbX10ggJ61LtvdbmuQzfRXLXYPV-ixTuO6N7h9lMPPG6MGGzbbrSbcZzQ-J48ZXTVG7KGNWvOsxcbDdvcS5dToqtdN8PGkPRrV0L3zvz7-E1zSmPiOhfCUMP6PGjbwgUAeIYdN5-XLH6-Gtn2xd8uGD2wEyHEK_MOuqLEe5T4gk7VFzV3ZOqR2ATKn8JPe5ORn1rG45-H91_T-X2nCWnbO7PXiPWc_ZVmQmU3ZjwwKx6cq6YeMQletmi__mfUuLtiofQug7iGeFiuQ9vBP9Xy9_lkWve2hCniEwrgWobBoRQU2KJdT_SAFk0qR09OyfH0yHrWyfzXmyeKoFFNqtCkeU-DzMz0KKdebbZjL3e7dQOgenwaqzS9xBbVY_qRp2IKphBDxCOyNHSEiBTgORu2Opn07QABLblDeUxPy3DxGBGcjonwU93JV6yLdt86FvdvXrtdd1HahWQOF0No3_VTd_l4T-7AbLl2s1ockHEm9wwMXeBnuewSVE3aws8FMGfPbC5p2HK-XiEWog3wKEvsN-0jNFK8IdKYvSyTdCgGaPrBub9Q6VZ06lmAgrYxyd9Y19UZ3_aPzT9ocDS8wCRqCA2oEWpY5k5b177c4km3-N7oaEAz6JPynuk9Rt3gHyVKROKetoUgb9zSWqlLlW7bNBNtH1CvJANWuu7yYPPQqV6nGZF32E4aqpS7l3HgDbIMY33THkUkaBrKQLoxsDpM7ETdN9xxGbRr5G4SyA0wwliVhToxoUjK0W635zzvnJrjb00AezelYi-SOXfaUDUJb1Z9NqDf0kP0Ca83G0vNIrds5KP5DK7uPOx3QVXRoM9meacieKnSjMAaR85Mt1HTt6buO7WPPDTZZszMPpEwUinl26cjz0LhruXnheLNjXaHO9KHN6mncNS-Dhb6nYj6HfVmIiVTwsyHnAfLSiC8pT2-NGcVIBZ-aBkRof8jITd2nTwFMaVNCRDQpi_iELZlpLaIDppChLPH44ihJfrolvxQLCB-ItbBBA0TX_Ce9LGmW-lrum_ESI5lPnGGmySZU-mjlKRIbt7FgWiWP58_dysXUcb4nVXKlNucsNC24VdyzZ2eo-x-ycXCT2iB--T-yTg2gco0KGhL4SzhffGINAGUn4vb3SX42AwRf577TYLZ1jujU6kjankPnUNH6ZOvx6cZOc2ReWJlfrwujmZvMxcQga6i-bMd5MemIjCwmJtgJow5oL5QIAPaP4s46YlfhkssewAWHIyOjALqx1ivqY0nsA_tomL4El3sAHYyISQ5OYWTCpTQgV8K6Q5svBPv4LTwRRYD7crUw-RbWK1N81up17Gy5WKuyj006D_SFIrUdXZnis1oulWm0LkdXMNqQw1QbJtGcmKrDTjoGICkmjrPAGK1e3AHwxfrrsyHu7kI_obkG7bPjspNCrKtbCUgJQrS-9m8b7S4gK-y7WGDLN2pOaToO4jgrlgsRoDXTPTwzkIcsnE3oP8eeqnQfn_6t5iYwj2NLuDYRUZtBnmy4KgDnWZMLwgkrbi386GjRowaitJ50-Xm91G-1bvHmzs-Gg6bH_Xmc4t-vM-Nop8sp8Sn1NuapQ08p-B68Gh3dy9sKLzHePVKtmkAeMlJu2zZtjqh8kFaHfy3HcXc7B_WeX3BKq5_D5z9-slQ7pSMhRfVN-SISmYPfZIDHq0yMp0aS2HKd3y4lb8LQdkYH9UsHW2ouXceT3iHPL7NhfHnmfH2-bt48jZJ11hDqd2NkEeOOiOUHMWHyvay-3t3MEdiISG3V00zcPFB9DDIssf-MNTobcxTMZX687kpMAGCEBCfUSBPp7p5aNHlCuOq-Fq8HudlZso7qrNnV-LLFRigAyVrYNXizRcQtypq4__yXj6X633yAZ24t2eFmuJY_yZ_QZZrofR954TNruaZPCT97ih0jUPgbRzzG9m5IRd1guDEM1BYrovpJUTymj9jxnMQcufwHMA1CCEvcJ9tRikIG8-VgLoltpqS7qOeT5g_obtbdg2U6QgCB5but0anKXbIn3GZDqjKlvUmWm85ygnhqUN9V2DO6G_GLnaFw17KdFdCKS0MkbfgNipAAFqRaxpN4kSlif7I92qKutoucL3Lq1pA8S5OHF15IZ27rFV3nyrOtet9YwnAymLR2_rJeOQ8vlekeB6c58vB_4mDZXAZ5p44a9gPwaEhpW2DEfaJUK0-aPzmvPGNRUQx-nIxtVK8gFXj-zh2NkYTukuYcJmDvOPgPc9jsdM_a_WKyO9zr9RP97l_vNQjfQdrqyhwtjaL-mr-gIHZlf_rMAbqBsdxSaZXtoeVRKYT-wqHjgmOap6bRLEzCeJeavaPW7Xh400MSPCwW_rxTUjdvHp4awc3I3gfDY1Vrp9nj48T1oEzHJCPqI0LRLFz7MpHKS3TwMyk5JSAYYJ_D7CnZkttKk5RxLR66IIiCemSGMMZC16DzEDU2NUJmhB8ht8io5OU3e-e8fFEfjfvu5Y_HkfOH81DxlJxSRv0ce4hu9kmnHYnXAKvJIvl_L0Op4ygyYD_YnpBQ2s1vGOESNoXS8umyYdRhiviRE3aboN7NogZQtPa_13YwVKkeM3kj4MQeyp4WClpO8WivWNS7-BTXQvsKKSUCHV6RGKC_iAnLvRWv1M3a-s0hl15aymvFz3nW3tDTyTzkcQ-PIBa5d1qs5stdVVTW48BOFgsyZrR99jDfRBfZyWhGNy6okddYCTrqfaPxEeGE6ELCDBEz2JbDYL0qL-0kmnDc-87tPDWB_GM1Szbn82rh-KrHVmiiA6oWSgfXWQlvGlrSom1nx2Z7w8uX4r3dLMySNjtChvMpIpN-ZGEsL1GcCY60AlpHrG2YzhKlgx6tmBF0wNdLuhN1JQI6VINt3sYwIaASILpqxalVEKAy2rYWPsVIF1rZHNoBI3l0-ip3d9MQixMuj7qWRES-SMchU7soPnUaT9W7hIwDIW8Q-xGuXye0l9s6VBIV_4Gq33AIH8STU_jYUdeHvHhZa3fZPLsajfpnpr3ddvpG5pb1fVqmn0ZnfH19c2H46ftjpYJWUIce8n_tBDWSXph-CyuVkyLVSxrVUZNqDRVUoVDuR0Mr5XJdPWcf44sp7pvv8EuroAarl2uFt-61ZGdn5wKzTqi7Jlu2KOwqQuBFqXCy86JYKtaiH4eF0wL9fZbX4yY062SCkeVarYRPMUXxX51WBElf0PD_pKhT-VgoECtFKKLKqeQsT0kpO4Srp8WKokvHT-UqEatUiUBN16tEoE6yVGsgUNFOJn_BqNqkRqPKpNEEudRm6Td9q3-9vvOC5EWqa073OfpwT8tCFnDUtYHoQoC8gBtfiHl1hRd8kUBXdbThGaCB0lOrZvS_Wq3y7pqiNJlNPMUkN2ICSVbW-wS6FHogl-mGy4teczxE1mPlgnaofy4hUtg5DJmadNI347b5k0dXjaUZA2AFElAiW_r5eBUp9W-__zd648w4:1uWCEt:CtfNSdR6pn82h_0xqW_NH6p0Qkxy0GhbBL0lJ3pTsZY", "expire_date": "2025-07-14T10:59:55.507Z"}}, {"model": "sessions.session", "pk": "gf9zftizeb7sa1394lxff2z7c3zl3h4x", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uFndJ:4dByDx20HO1HkjiW2VvPrW6hQDD5kyKC3OZobBmuPjc", "expire_date": "2025-05-30T05:29:21.556Z"}}, {"model": "sessions.session", "pk": "gtbhgybwcmc51eplv2qchblvp912xm0f", "fields": {"session_data": ".eJy1Wv1T4syy_ldm3Vtn3XMFCciX94e3EFFR-VBQV19PWZNkAiMhEzMJyJ4992-_3TMJJAR9935VbeFCZnqme7qffron_9x7oVE4fYkkC164vXe8Z-wdpH8zqTVjHj6wX6k3EUVLeGHAzSIOKcZPZbEnbOaexGMzAqZUTmF2tWlVGiXmlJt21WA1u1quNCrlulGyjWa17NRLRrVs2k7NrtUaNeY0mjY1aoZDy_BzpXbUAKG4MnsP947__Oee2ursLTyt2r7XbOPjkIcug1-Hq3AqPOKIgJywCfc8FkhSINeMBh5pC5t7E7Lk4ZTEA7lHDHIhogBk2ExaAfdDLjyQpKfEw0wquSVx9GskQ5gyhSlfyJAFDrNCtZy5Xo7DTgMmQ2bjhFaXUM8mllq7SJ6jco0aZOhG8oBMWEhqZA6qTSURDqzWntJgTs5uOx29zWKxuPevg1jlwJHW_ai0CM1lSuXMRgvkLHJd0DQKJNsyw5_jKBQBp-4_csqOp1zCFtWkJQcBE75gZCUiQomDAkGnQNiRhePxiyAUfoUth1MGEwP88Czmh8pIvtpMkZwJ1xVLGCoSs-PwBbeZkMoqsMI3kGMyWCejKn9vWrf0ZHbPSvnT3VbRCRgDw9qNig2fVskm--VS-eh7Tk29L_I1jA1Bvm5OLZa9fpQ502_aCrGFUDj5e8bu2o8Gd7d_z-rxEt0El6Xx7Mm1_lqP9VF97ow4tNU9IHNqTbnHiIsPwbkOlEmXzCQ2WzBX-HPmhYnZ4XwTbQpOwCFS3VWszxdy_oEfZlQJyy835ZPbn6zT-VQV8PB67eg5cljJIb_IPQVzmi6T5G907v8HOaUhJeOVDz_8gri0wgicx9jtkW78eEklaGszrQwlrghxm65YZFfrixDEZnZ9K156I2t86twdfRQzcHYDD6xRKZEe9yIUsZ8cBUliJu9MXU-bVbkz6X6bk4lAeIHYAH8OmTqdiQqifJCEUxqqRx4DmIApMw8CBf4iJMiQBogeSttIopRhHFGgbtWsg6dYYs62zqfhD-2rR18su_nzGafdOo-MG0tUFRoCWJzdXV-TNnj0qJPHi_OAmrj9OPa6Y3AAz6bocNSV5FZQe079YzINQ18eHx6aPCy6q8PK-X21L1bkAhxVFgZeElCgt3Li2FBz32UhI6PT6zbs0AnEHOFTDctobJaaFfrWeuLDu5TGGyCoNcFcpZK9-cU0yc4MkZjnw0MGNPcL5qqAf9Mikpj6JtfIcRDrMoUDxRO2qJc5VT8Qk4DO53is3FufbMadDghkDSmj7TPu__ALi4h7t5NZSuMxWG2IcZIOxlEICZk8ABq0fF-SM1iSLUUwI4-wp37sdeNglVP5tnN23fkBhj-JuGvvFIbb3qxXhLgjl3RBtRRyy94iHjC7SE43go9zCn5LpRWda7bPt3ldr9903ofzbjoJINvYuKwrJnACk5wWreTJ-lyKpAWHgGHjQ5yGB3AQ8AePJWTouJCRAuZ9CwnzRDSZFsnDlHk6UEM-V37J5ObEDtSWJRABMFKA0a4cAj3YBMOFMDCjzOL6beyUzdr50_K3w_NXLjyNYhyguwFTYxH_EC11MLV8jwJYuy6bYN5MAWgr0CcBjgI5wibUFFFIfJda2kSHitt4csp9-Qd5oGA_ODQ_YD7YTm0-o7PTbL2yF6v_0n5M6awywCgMIgXumgi03AkYIJzOZQbwwAI9NqHkXun1i5yOWpsT0ElXqZyzRo9CpAYoyMbVZHY1ulmNS3VkM7ZCTZbwK05ijsMtSJLgJdKiLuYvnV0FLDDnP5mtEQnxxaiAjedIC1F_6q0gcn2u1s4Y4-H88rIbhJ7jzz6nAgVilGMU_rUO6S3YTo9fD1p70S_SsUHZGc3ZJf49mRFL2L-Dj7ZSaO9xcDe-O-mUS89734-zGvx4sh-Nqry4o2nKXUmEAdMdBuIVcrbMpRm13w9R9nw76d0yK6AOOpdNV8rwiKD_ZhjgyI6ycTICfNOLXUafyN642zOM5z1Cw03-gdIl0BOKlB_CEZIxSj5ICKhG7CzZLkSD6_d-0J81tn235VF3JcFz0pXEZ8x7vx_NfVhtCJpQ4P09GvoQlS43D8iIQZAFXp5f6ND_eEEe4ynmy4ABVknk7Lv564Geyd5ZYHGpYMxyI5vZX0h_MO4ck_aUAcCnNrCVd_z5mfkwqF1kMm1TMd6RZoxqT-vzB2sg0qxpFMRWy15QYD92TlG9NgLNfAUA7YRLBJM0h014anKcIbOmqBAcZNFj4SGMJeedMek96tLp_K572iEkq8O0tOQ_gItP_FZKB-DyVdLSdU1PLDiyYY64FmvUiyA_4MNBpFC0jRWwgCR_Ec2px8MVOQNwtMGfgPmQzjvAhxL2hXy1uVQolFP4FHIxJWoHx5AjgVGAE6iVYN2RR2eMfH2OjlgZOEu1XjKfo2bNgc9Gs1mDX8qNOvnaRuovmRa1GV1z4LNerVRxtKVG12C0rYZpqH9griKPcCSOrs-Qx6EWphAzGGM0y1swfmq23yhki_5dHrl6jMF5F_ud8bFmDBiKAAUj4Uaob-y0bTE3Ycc2Aj_zJlho_CInt1eGUc3ZB2QluAzgDmaFIA_Bn-faqZNFHLBuGp87mJsgqUtWgHxsA24gV1EJPIg8RI3lFArz4jqAPlzCFjn0flk-3fX5eTizdqTvUwgxF9INQjcZURoCex2DxcF5k8WeIyCicB4lwwDK7H3JKY1F5bcQ1Ign2IlMCR-AbxDu3J3FxXNEhEsDOjtIi3c24udsBuqFbMU8kAFCV_QnPqwYrv4z3zVjkTC6b5TATE5Mis-rjktX1IMFsyZ5PH3p184cIV7TJrnQdYwmj5SccgmVj01OgIQ85OFynbIwDv89T2qCFbmMPA4ayDnkh7iNQugEYGED769mcTI5DINV4RUHkw2ixJXsgTppgVVevD4CRFJ_baU5J7ziF-3T-6XT-qhkjJtdcPAbkDJXG_-vbJDwz1Ra-KDxsmZtcbPF13MLJpUQMHGbLVfYa1DcFA76u6alqoezKUOwJFXnUdELpEVmVL-3ptHV9dGRrO2o8VtQRUDIAb0hQyElh6DbUUD-Z72alNH5PJ_C6NHgbPzQuu2Q085953ow7HX64zVwr4E-oOj5k-I24mPZWZhEYDiiTOhvdW8oB24HaqsyPKtj5dJ4P7mu_7z8McnraAvy1LkdEAoVjQpZ2u8ObkHNARwTmIzZAkkkLGuBtQVpXwxuWz2AslsczQyfgwTd6BixOZQSkCuoelRXn5U8VT0RAYV1oR6EAFsHP7nrtch95-kPqNWkjJtmyMcDKLOFVMwoKZ8y8nHrWsoxWdCA630tGAcSIHwWUKXBAbYibOC4wqP4JGOhS_bTe3ipn7onO5pvAxN9kwywh4R8bZgqZ_cHg-F3DO1Pm1n_L16QREFCeYjQ-xTJPjMadl5fSuVue9CdyJSGn6n2m1Qvp-xnMjHiIWbmvghU6o-7QxhFu2hQOtTjFsmm57AV9did1cVbNr5rrGBA0uU32fiehqBWujHhbNo5O-gLEs3rzqk2yvmwO1AxA3Q2oADYIOoWSiCTBfBlyFPLF-7Z_Vvt6GyyTDtWW0eS1kmg76_tjOHIAuXTLWCP2tHBg8m-LvAsl0qZp87_a4kYdGES45vpViJxISw1kwLHCBAWAh1mWG2D-SLIT1vd017NcsZl_80fpRvBo8iniPKkHVA5TTwKw2fNLNTx7_Ks_8ZcfVAynlDwV0WonyRMsJjcZNHkeRHUPNzizs1Fp2NcPcjuUcZvKPgfxB_YtQX_mwNT_snITUTdtwhCcIQUBHgnyEv29OcQzAvWJ-pvPh_e4DxJwXfInGLfTZgQBIJ4Aqd9dK5_kLbLYUkYhvafgetT_i6IDxyJTODDCzmIjSgg4oQSj4KvK_5TeefIxKNgTrdIwOXl3Lo2-uWrG5nHwJzFP47_dciqKckVS3zLYrK4ZywWbH1s6TCM751cDiXBImmkH-ieRqh66Fgbb7obBxi4qv6A_7pC-NvQ3u10pj9vxFV4s4PKj6fIm3HdhJYdk9vI050BKHwgHMDZQyBRd6rgRk61mdODTATSPm2TH6RVT-4tEooSYSdYiZPpxmiWIkkfdIMMZiu-FYAorNaK5FygiHW_ef1ABJNDS3OBjCGq_UmfW63-6q2XJq80ADPbpD2qllRvpylJKwg5doOAVXQBwkEukE-LZTJC3AdSaeHOA3gMJJaG2kM-vW1TDblk2dRU9u67imrolnh8bbDVvMLW5BQzEKK1qlKhQp3r_ijdbJuntg3Owxe56qZKvfHjxUPUG6UpL_aVe1DkzqGuBRjhSu0CeD-jqkuGj2iqxtPG2EXi43sR7MHAXGTiDLdaMd2IGWYglt43mRanGzrrNlWSWaDUc-Hk1Z6K8dYy4bcVxP7s8X4wv6v0Jmm1_qL_yH_nMnVHvzl_vZa5NAX1AQfnSO62OpL7CFmglgtwCfEqsdcOfwHPIoxoAAN_Cilp6-z3JYSPNYXxwB7U7V9G9fmJ-PFy2b56Gqcz_QhgyE_8MvHaWFvs7qvnKv9_qiw6Rixq0-Rqp66PNe1GTgI5KAD5yU1Yct0VX_cI3faDIj5eFyoScH-mXBsre5ZtB-tF04yi3Hx_sdnNTZSG6RZWlsInR6Vk4rXyIA6COz-G161uH9gLHHS5ROYf1CqqWFW4XK6WYg_k2QsAHqrLHUpMrsibo_ea3OYtpxyMgK6ueGncIFa3ZnGFVyRtyrCBuaTuTMZXhQHePqi4zhxo43SxWoqHRc3Zcb2HgjtoaVPYq8RvU2iSaffuxqN4SGVTQ8UIlS2l1HmiTuqiQ6cniOR00kKWBCYN5Nbd5VghmZI5hRrS277tGciSqCx_jl5-__6ycYwXjzrhfZh5kpp9-0o3nYzgUS4f4WUA2yTU4mYpvClKMAztAAVZmOLxyt3zKce_rHSHt2_8tNzbQSk-6uVv3wjFOcinNNyh8frZhrKi3A3J45shiufpwrkAqxQQlwrSUjBfSGquw_glDu3YPh43VRfZ4Af6BZcwVX9n9G0vbuqstroLvWUmqcDwriQP07VbKkBuI_FmUl1BtZYML-o-aInHxwOP-MQDeGSIFUm9BBuqq9vaFLGlwSv1ing9IA_1LFUzFvXCVrzwBvdRDkh1AcJ9sWSBE7kKfT2xVU79tHt3l5dXZ7bMXkBXSkZJW0T93zh6jqpWyXmOarWjMvZkDezVmvXGc9QolarDeGitWm3q38nX5FUV_8Nn8M2oVZ-jZrVR-uhNl_zs_FzIAiayHXUB-BzVa4zBg0rpaOtBuVJuxF_2S8cl_Pdd3a-bOOvIhJHVRqMCn8yh8ItTY6h9yYD_m2ULW9SlEm6lDIaoU2xrVx00ypbg-nG5puV-J9j_RmG1OgpoWFYdBTRRl3oDBNSMI_NvMKphNnBUFS2aEpc5LPk-nl92jmalqdjiOO2knM7G4ufEPt12ilGNy9gpdY4LsZGPmK44npm6CgG01JHDEgmQBFTVWCS_ITff0wquZg3Iayv52thKg5VmotUVg_wRALcGMudS7MXvREy8F_uWEO5dbF23FbDBgPsH-bNEsGq1s3cuw1Qw7VOVICpFo_y9SLpreQpB1F0rjbMkZpasWk_Go12P_Bv54_EvUkLLlHjfwFJQ-dWARPiAW0JIWb-G9MfnL1f52z2fdArZfbn2hYw5wo1RJBcsYMm9Ahh5hZROJwksXZBCy_SlpChO3EN2T6P7H9s3rbWu0bsM-oXulq_GOzkXrg21mZziexU2WE9ymhQsI2TZIelhCQTQfgr4TaEYn8GZjANq52FVXdXdcxZ6dI4OdoGv610J5JSoCFBVxkJIEQJvvYEHJRpGboiMHc7SBaajOiDqjRvjCCgNexcht6BeA55DLZcp7wDHciikGI9iL-wBmyxg-vH9lvbcOCs_9VpP9ZuU9vhaCUyQMZdbZYj6OrmnS_PfqEVt7EWsQzNTpAsdoEGyrLu9LBz3eDw84d7mSPGvyT1VdWZ1Gt3X28NOoVky08mfO4S5GOH4Fz72fdWKy3e0kjy79kAOHGrB8P2TpRe_1aI9N2FdiWhMXIl41fNFiSBg894LeO530sF37QKoF4EtnmCIlr-TMX3npAfAGOzM77Pm-G7on789jsVvE7byMVZeih5BcIpgto6zMXsPIxiPOfn_jsppsIq9eP06CLZOiuuNUHUJGinCpt6Q0nEf70dN2H6Zp9mv0cL99Qktf8JVj7MKXo4Gfc04onX35FWqa-dPGyebq_U1MO1SO09f16qolVGPIoTcjrshV1BbD1Jv9g53nPXr-JH3XxfexdMnSAxYBL5C4YsuqtU39epnCogBxPQbHXhReCr0dzRUHpj_xxbQp84zm-HJZlQhomF6_W5UXLwp7ofNFDwcGRdg__jXfwGnvhcq:1uP5d1:eVnfvUYXfaxE3bvGsSkpSZnHfYaRN_SvsxB7fXyhKgE", "expire_date": "2025-06-24T20:31:27.181Z"}}, {"model": "sessions.session", "pk": "gwbgiuuo1fx7wl64dqx3uo8olz1aq9k9", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uPJ1Q:A07cp-Uu6PxK-IwoYcro0HZqiLKqJcQSmOR7HWq6WyQ", "expire_date": "2025-06-25T10:49:32.017Z"}}, {"model": "sessions.session", "pk": "hazneqp5bs9p0t4vspz0ph7r5c13lb0a", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uW6vq:M3JBbtsec57UFSULbtTPRFeuYVnIOpLg_zBsUvZRtYo", "expire_date": "2025-07-14T05:19:54.521Z"}}, {"model": "sessions.session", "pk": "hcnlus2fxnpx2nqa0dzb4mo54w0r8jt9", "fields": {"session_data": ".eJy9VcFu2zAM_RXWl26BYTTpkia9FBiKoQU27LAVO8xFqlh0rMWhAkmp6xX991F2YiRtUjgdtptBPj89PlLiYzAWS5eNlxbNWMngPOgG4WZsIpIZkk_IX4KmOko0OaMmkYdEq6yNvmiJ-ccVdosgEzbjv_uj5HR4gmlvJPtdHMh-73R42jvrnsjuqN9Lz066_d5EpgM5GAwHmA5HUnQH3VT0OHw6-DBk0iQTbpwp67Qpg_Ofj4HROTK1P4bTC2GcreIOHxzHMxU83T6FDU5Yyz8LcrvAX2eiDOH6-B7BYILqHiW4DMGnIa5QcRDBlS4gEQTXkGG-gFIvoVAuY6hwF3Cp6wifAXP-V5_HFFMHOp1LTBVhxVhoIxvGi06nBtzYHVlQBAIskkNKsMF-xzyvDhITvXQgVZqiYRC4coEWdFqpbuBXa6WCRF7-RrCaxeEDm6Fouo39ximX-TDmrIhJlcG8rPIxfcaqrhmxCwVXXLFmgj1joXNF8iimbc_39UbkhSgtqClpgzApIVXGutrtGeIClPOczG8q4gM6eUMSmUtrGcF3DkVtNR00L5unXB_PK9GVm9zDhcF7pZdcHjfOiMQpTXZtEXdB1nV7eFVgXXvMArjlnn_nnLHpF21LKYxyyKOzKF2miQXpqRFzHkhPl2s_Zfkhnt7d3dVUMS1Yt3sXB1eeKIQfnukoDt7HxKC2-vi60Mz-D7tD_kjypWzMbtDNJZujtWKK-0wPm8PWHfSXnUGF4mu4mmCvY6uNvsvPT2jdvjdOYghiKhTVDvHlZnmbPilSTgmWTNaZ5Qub1iP5aim7TAqhI7yqDqRG85Bl2r9lhW5dLmlItZny41I9Kqp-UqxQh4zo-gGf8_tt0VVP27zcKjaCT_Uxz6Zmw476RX27Fwfd0r9eUBuiWCmtlEUceqlsezs1q2nvYvLJNkvJ41ouJA9ts4w8bt8i-pfeclH4iqe7TK3l3D79Abc4L9I:1uOMpe:qGpNAGsPGXaKvoOiM42YRiXVT3OKZV1YBsUeFHCRVS8", "expire_date": "2025-06-22T20:41:30.853Z"}}, {"model": "sessions.session", "pk": "j0ndhmrmjec462n5qckhjb4mhlnernoh", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uVEbG:KSqumDbd4CTLNZY_o9Rq3YcvQwJK9hK3XlP907AfErc", "expire_date": "2025-07-11T19:19:02.501Z"}}, {"model": "sessions.session", "pk": "j7ue150i3q4tkrdt11r34ijsk4x3sfis", "fields": {"session_data": ".eJzFWvtz4riW_lfUmartzFQgvEOyP8wSQhISCAmP0OmZW5SwBajxqy07hL65-7fvOZJsbGzSvVu3aqtm6GCsx3l-3znSP49mNAxWs1Awf8bNo4uj8tFJ8tmcGmvm4A_4VRT1d1Hs2JRbl_rX1JAVFSt4v35uVJsltqicm_Uya5j1SrVZrZyVS2b5vF5ZnJXK9crcXDTMRqPZYIvmuUnLjfKCVuBxtVFrwqSG6wTsLTi6-OufR3Jz9_X7586kSil7gp8DHlgMnj5ug5XrkOvQskjbDX3ByML1ySVbcseBTZO_KqVK_R8wwmTC8LkXcNeBcX0qAuYTPXzhuzaBn2lgrMiDSxZWuFj8HVZK5dq3UATEsBj1T4jnUyPgBrWI4ZrcWRKx5pYlSOCSNTfWIqB-QLawC_INPhy2_URgkrNG7e9wwUoLcudyhwQrLoixorA9C0cuWUCKxeLRv060oI8Po-7027TVOnMTgrZAQL3b0dYJ6BuBuSp10udOGDBB5G6rZBwGrs-plRF4jMvCf8EKNITCg1gbusUdoHAOoZbtwjMK67iLaCkhlyqSEXcMpreutGy7r7Dq9xDktraEB8SGyeaMrJjlLUIp2Yq-MkIDnB8mFq7N0oLOu9_unu_t1o_zZtKiL-PbwQO5bI267RE5nq5ghi6ZuqFlkp7c6TX3RfB7RsKbzpiMxq3huHNFpt3xLRl2HnvdcXrN9ffgqm56znm7mfWitOcU9HJtZesND1aRWkD1ZXILishsQg3Rr82p4IbAt6UXlckKhnwij8xfMCOQy83j5Tj4uw9WYSYOaHUJdUztZ0W0boOWyaMVihPpMQ0wgBOshLJVe0V9m1wPOx21zZTI045d7UxMblwtsyJH_oJrVkuxNx23fYjkZES15sK14LedgrIWmDLLQCuD7e1tpITkTJ9I15Ee6EBo43q2Wu8ELExtsnRR0TA68LdS_IBRCEiIKEIFsUMjNgB87RKDOnpCcMu0yLcv1fmP-uzJ7OZYGXOF9mKMR2aFy1CZFO1D3mGztmcxkNVTI_TL7-SZ2oKTS3Bs6vCM-NFWXrnJ3BMYlZ7Fos4ypEuGUcjePItyR9larVskMkS9vE0aVghLQf5xlz61bdSS8q0T8krBfHMLdZhSQb_Av4pppVludxIqSLnnZeyed-ieldj8nzKiJQJk57GB9p0TslmB66KdPsOureQaTAjmBPCSkINNGlCwLLW2gguQmK4ZQZ1HviIFvkhLMnRn_ZExvlpMaockAREGDqShpAdHfhq7eNZfUwYj3c8JD4RMJp0Pv6L_odMaro8fkAm9ABMplckefBnMiBDguJsooUsogMcyGkOBs6itylCuz88gjIxMQlxS537-yJo_ujmRqhDLsKiIk_0VpNzqBYkMuUvbsIupz8H1XlC5Ml_G4CHl_yh05aw4WcIwicVVyLkm3X4WRIB9YQLwAKZkjpARje0zan0i0xUD5fnSO0B_NHYgAq-kxPcXwngelV6D-eaQoQsfIX1k6CzajxPAtQHIJkv-ylReUZEGydd3zdDA9_GLG-Fg1u7ga5425bVrWWBzarkRPuDr0puEzF86IuYodkrUWfjk35XG66-W8b8gMx-jjczS3RMAYnRbpuIQbHEit7Jhc2KyV2a5ng0RGW0X9BLZo7DwORA6CCNDJ-ubA0CTEuW19328qMwbN183H8BL2lTvZD98y8W6BNSsjONdhMIfNjWZ2jsllhvgrixgIorBtTyHguIsi0GWTTGvlkpPZOP6IKRJ6NwNAwI52GCoDXEq0dcRK-6JP8mUgoLABzyfedRXRkjJzFfO9MvN49tDZ52V-TGRpfvUolv43z5MzH5pVMonflP-N0vAwcyOhsy0m_-2ZWIWMGM1s5nJKSjcCELgFxeFtCh246wwH3gD93HygfkK5Ge-iUYcU5tnBZSsV-YhHDsKoG4gU_DGq4Q3aukvyCoIPHFxesp83_VtgAcB3PuV-UXITqcYqgLHF7SQUbrLbDMJnylxN-7zXe2h7lgzkRVX59F3si_-9Ufem7ScdMORLiTeSccEla9pRiX6eQx7zA_4AgoLmX7GPjADnOx4ArsH9gm-fPQymIwnl51K6e-j3_fwkU2Hi9XXyQ-_lZNL0jbSuJE04l_J7R_OoEpiTG964iQX2TEbDahJ9ac4wydEJJWCrXjGReiYFN0AWcIOxDT_BUzauHuFQ-m8Sr-3vvKUz_4dms2qCZ9G4xwFLZm7J_M5yVXIwaiMqAHAnleYbwv4L8lhQZ-TNEiJtAJIwFwD9DTFBZIa407MB_ZYIxBhIcJ9ZlC6n7GvN6P6g8iJUtyPLlK6mMZeOdtg-dKBuIE3IgoT8ZR74CkZeaO4g5cCVHqRu6cwRQsEDbBQ1qViMiNml2yvmLHGxArsXwC_AQO2VaF7Qf7rAWZGZ-4OyBUXgKnmnh9PfGFfv3W6Xj0nqR4IRdDjLXdMniTtKS5JYh8wK_VsHL4ZPEAhHmD7QGw-A5LIUs2ioWOsQF8gyRVy1pEB2Giw3awykNBFeQA-gNQP9tKhPsDnJfdN0jIMJsnSQiofQcpUhn5MFhV7rL00W7T82tXlrJ1jZ5WeLqBOYGRiBdymIO1NCH6z59XH2PPI0t1dDC9cDDl8nAy4KHqzhED6JlA5hmxmQ6215sS-Gy5XMA5c3LLkfCeqMMHixwbtQFUiKX-w9dhejfZsrML7Xq0mGp2sqC1BrrFpAHXeowsUEwqcuB7f7fa_z-L-R243oP-iauLR4Ho8bQ075Krz3OkNHvudhzG5mXSvOoTEiBPotFtE0ESGAQouOiw4XfiMFZZSzckKLQYdym3ZAlLFahpcm1dfWmJL-_elrIwxD47LyxtgzKotsOZmThU2TlonA37wGyVLOYUkNrgnxcm58kHZj3EQTaU9gAU5W5Vh5wwWZUUwMJnDBGtiuhvlKUx6dOB6CIzo7in5wsLAfvZni3EtB02vIYSUi2UBNb-jQH4rH3BaZOOKs8UAryc_IX9Qf4n__LHe4F8JZruvoRQUFTMZIw-w9nJUUJk9VS6HP1gnx2kTsJoin9g30EU6-Q9qe_-pUspYxsR7xMxIVnZpb0v_vKEH2W9qtQc32A-1oOk9mvcvnrvJaYccoOjZaNMEnfx1Pen1SHswGY46WaJw49O56oFi3JDuGP1gB-9Dl5o29XZEb86DorU9rd481x_cLbnFpFEYxMaI25OqENMGG1312rBDybYURdhjCNOq5Y6cVcNkyTyaqZOBL2J8ZDV_i_0MBDpcdh4PS_CfMmQnbbmiBCUprutYWHqpzYNTPnPBA9L1FxRraIuvP8e93z3P6gzb_S9G8-3MzmFxB22UZHLH0jGU-ZWbPap-NSNPIRMyWrKg8KKZSqJ5PWbYaItqo9NuXBpFbW3lgoCZZMSXNiW1YonsLLrZbIoUKjFDFWJF7pwqfZwKfLtQ0zA5R5hMk3PL7ZceZt0-_fVS8ucM4BhtXM5K_m-aNyZwUX-BJflt1M5DT1XIiL0F85UimUgJ_72zcaz-Je0tchwAucWbwbDCyfS1DqRM9X7Ue67IHqPYWWnNXhG3oVIBPAiKSBPXWINgoUVy2e9HPDfcFWOwYkquH5X1-d2q-u3qORmKXWy4oC70qB5_BRcF7LF3RZwOV-lsI2p_wGfm-4Ft8agnAAMhPI1VQBD4tqA1Jky61d1WhHP0exhJgbIC39GNPWlCw5VYiTDoBNyPRUxjfP-1MRiFPJjmOG25VL4gu30CXQFjFJCBgxephlJGrBHkkQegx4_Y6bvE5iEQSVQrVe0pHKwxoFqQzRmVewLpxbITi0ZGMg-zeDCLLJ4TtEYNV4kz8RQpU0q0pnFWs788V6y7HPoCG7qHREZNChbrJvtnYFVdGyBh0K-_f9A6KOQBf-SD-V17vTTUS0hJFTtLctKcKjXu4Em_QHMsfeTBJPSK2S5lul339vTABuPhli_3fTgSehy7cqG8Izz7jYP9nPO-5-vvkFEh2XAZYRmVtFSbAAdiUrYsvpRFSceBFRjs_rh72f89vfXz1fOPzv3Xp20_XSuXjEoNP2sN_KxW5N9l_Cyf7f7Wz-PqWY5rymfyrWpJ_m3KcTQxR12Nw8-SnKOi5lv8tHuSjPrOG8XUKwgWNFmQ5uRaVigAtKPJY2dIxreth_uRPGBxkG-ZZL7FjsM4xBYsFmsLSXqxXJVFrerz4Vmzz-fIRfHXBXcgPaOWReh5LqSHY8fFA06smVx_u6fhZ1o9A0X8aBX6ySiRxAKk3Q-NOB7i1nq22Zf2mhh2ZExBRQ246ixZRh-V2umZKnjGDJAXtEpGSoBPCNQOmXiQWDZ7xKN53w5vb1l71k8GeaY_q88udy2VkpnZgAY73Z-Mabf-roM3yrtUHR6nW-9YRn3cYypGFfVGnggDpUqQxDSgblrXvXL9_Iz1f5lNKA4FC_ICLP4N-F0OZUrpZq-ro5mAJgx5FYVGnl1RAgUbNmbTq0aJDEse4cY464V7lwW-ll_Ms9B7El9efiJkbrkFqVcesGN_PC5S_vx1iX-x1vpExhxYBykXiWTW-h4ClKlbi4tAUWvkGxKBdyRl6brFpXXKnmn4_GXPbbuL0fdycwAV38FGLu5BlloteeKYg7Vx5ecI2AegvDz9sMEaoYfNBxfIvOb98nYEdwomw0QQXf0Ak2OD4wQZkMw2qfVOEs2jgMsHOFY-TElTo-NG467UbraT0twC0o9d1QLuOpnMcbA9vY8pKfO9R9jhUZo9B0z8lm58GfpoNjIN370o6YXmtGbBSDazC6icglBzFGiMXwWewK8C50EBSlufitP88_xeGN4N3M7oeyXp5QgKeecSeBKhDvWBdPiSTck7BtlySNdJcQtz90s2uf4bFstbiMTHI0DYLWB7rxihW-ydavul4by0ue6NvlnXvZz7K3pA91AjQQh4Sf0yBxd3PeYjoMFu2Zvnq6PcVMcudb0APVeVMHHzJdFDCRJL6H6TbBTjkRCn--dnb-fGkF6un1kOsdzniZLcJnFH9jdr2bwcwc8OeHZ3FT5MT59T7BInJ39kAfB2MBn-kZbjfngzeLjjtdtW62dHL3tRmMhQErHf5bE78oVqo3TFl3zcv8maEapvVaLrM2Z5Ui1rHVU7adoUxaivS6oid-MzzdTtjOS9tz_J-KPTYLIfk05v2Js9GM59IXkt45b64DImaY_qJdkkPxdZBrQPIDG53J1OTRyQyhc82GpX-HVMkkJF-9jNA8QhICaWmZDKwTNNxjy8ueZozgGzI0eSLBF9Wnas5JYBAPD0nHqeyLle9dbxJ87g_ml-ffDWAt7UU82zi-xdjYPnpvtTyLf2vCrdkZCelH8qq6o98IMxt9kogLR3QUoXJfwPC24f1IBHs4EUOy3gGVvVzIag81ZOsPb1ZYOevmywA6XjJHxkg_Uy5JapG4XyfkqrSzT5STrFp0NeuX_LYRfagMRC3j0pbFwf1sB0Vjx0ETMl6bg3PD-3Nl_K6xxOAfU6RBN4MSTMqI3L4idZ0I1AOjrNjU-Dd78N2YaDuxVI5f92QpzuuTE1BND4VGXCQiIq9mA5OuxQ2o0WwyaMvmqR0st1Y213vem0Y-acSj1iWbQ7SSWVC0kcFrAw09rIxyNPDYztJrstIu7lKGIlpynKGa_ljLJysCli5lw6C0SSmkkGOPwsmRgEtc8Q09CdAzoPLapvnx1nQ_ichZVK49uaOXlwhCSSvQ4g-DvJW3uN3V2z9-iFZDaLrZyyPLzowotS04WcxvP_i92VyaPG1j_-9T_oBtU4:1uVrsj:Gyez0Bk7LffdgGx_eUVVeFFKrEnyZP4_sFiZyhNPRWQ", "expire_date": "2025-07-13T13:15:41.375Z"}}, {"model": "sessions.session", "pk": "k502wmnnv3j6q7mvsvsi88ybyw1gral1", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOUo1:rB3Di9SidG7PhVvLAj7f7H_6A9BGkTD0fj5Nwpo1Edk", "expire_date": "2025-06-23T05:12:21.737Z"}}, {"model": "sessions.session", "pk": "lcg3cbnxik5p7oeme23tkrns3473105s", "fields": {"session_data": "e30:1uUnvD:hs3SGnjOXslyx-EAGRbn1qndN_65hBMK5AlxLfeOJ9o", "expire_date": "2025-07-10T14:49:51.532Z"}}, {"model": "sessions.session", "pk": "pdt82i1418x2892amvh8rxlihw2vznem", "fields": {"session_data": ".eJy1Wn9T4syy_iqz662zu-cIEhBQ7x9vIaKiAiqoq6-nrEkyQDTJZPNDZM-e89nv0zMJJIC-W_fWrdrChUx6pqe7n366Z_71-Ykn8fQpiUT45NifDz4bn7fzv5ncehE-PbCfuT-RZUv6ceiYZRpSTp9G5Z60hXuYji0ImPJoirfr-1ZtryLG1X27boiGXa_W9mrVplGxjf16ddysGPWqaY8bdqOx1xDjvX2bGw1jzKv4udbY3YNQmlm8xZ8P_vzXZ7XUlx_xUd0O_P02PY6d2BX49XIeT6XPxjJkh2Li-L4II1ZiF4KHPmtL2_EnbObEU5YOdHxmsFOZhJBhi8gKnSB2pA9J-pV0mMkjx4po9HMSxXhlilc-sUsRjoUVq-nMxXQOVhqKKBY2vdDqMu7bzFJzl9ljUm1wg126SbTNJiJmDeZBtWnE5Biztac89Njxdaejl1kulz__eztVORxH1u2w8hqbs5zKhYWW2HHiutA0CSOxsg1_jpJYhg53_7mm7GjqRFiiemnmQMDEeRVsLhPG2ZgEQqdQ2olF4-mLZBy_YsnxVODFkD58SwSx2qRALabMjqXryhmGymzbafirYwsZqV3BDF8gxxSYp6DqtXzqDa3R0fhm9z1VMc_Ad-esVmE9x09iEbGvmbIsU_XbmqpdH4uAtmoVrPvFYxNJXgGVsIxYcGtKX0n3dd3iKY_VI1_AunjlxYd--EuWjGIektGVoklEUi7TjYDV62YTtrCkJ4qaPiVX4Vll9PLgWut-_K4xP3ZXGtrqbjNPKSOYSw-xnm216TNhMlu8ClcGnvDjzDDYk8yHS-PQQSxjc7VPfGIn73hqQZW4-nRVPbz-KTqdD1XBbjQbu4_JWFTG7Be75bCU6cJ-f-Ne8N_siMecjeYBfviFyLXiBCYwNvusmz6e8Qja2kIrw5krY1qmK1-Ls_Ul-Ulh1c7bvnXND19uReWvDTAOhYA17b2ajU-rYrOv1Up1d93NdAiwrTh1RLa1BIhU9uJRAT6-6IBLg5GEs7-v-j0ga3Bz_feV3d8LLu3z-0DOuut6jPJzrSPjUnRdoSHA4vjm4oK1Mc2ws44XJyE3KQ7SDemOsFG-zcmduBuxa8ltjwcHbBrHQXSws2M6cdmd79RObut9OWencMOoNPAzLRFAykXTiPMCV8SCDY8u2ljhOJQewacaVtDYrOzX-I_Wg3N5k9N4aZ3GPmxfqdjLX0yTbcwQ2fa8ixZA86Bkzkv0Ny8iM9uXaGHO7VSXKZCBoMLifgEeglBOQu55hA-Ov4CIAi5tM2SNKEpWweLQOTbck-6T385rfD0YVtkZ__lzvlDkAE5LkK0wunrEetJ0XAHDmAiMxawpSo2SEIIix2NDx0tcrnRf3YlQRtVnNccW_ZdtpV8sPQ8sJ0P1DDNQrtyygoBtecICZIbSVz-leJTBEdtKo6RN1iVo8rifkJM6hAYccT1FJj0o7sH-RbN51Xm79Lr5eCUOsnRkV05gl8maEq3sycJaZdaCaQiVA6SBeBvmwR8yVizIndUy_C8xE75MJtMyu5sKX-eB2PGUt4pouaPbyuQR6IFrs5CSiXIT8mszcdwYAwvKvF78GI2rZuPkYfbbQftrLWiNchq2m0FSpzrnXYTUIdYKfA5LuK6YEMTlQLMVai4wkyHygs24KZOYBS639BbtKMbjR1MniP5gdxz7h1ANQhGQCWnxBZ3H-61n8WT1n9r3OZ0V6g_jMFGArulBy51gA-KpFxXyKXagJyac3Sq9frGjYSvn0woflcpru9HjiN-QBNk0W1ScjS9ncyJlshcxJ01m-JVeEuOxYyExwksii7uUs3RGlZjAc34KW-MUoY5Rwx57RBZJf-7PEc-Bo-YubMbdydlZN4z9cfDycfYpMaOaYvOvTNXjFTDPj18MWnjRL9axoewLX9uX9PfsjVTC1xt8qNB8_Hw_uBndHHaqlcfP31bi8fuDfW_Uo9MbnifitUwY-O9lKJ-Rp6O15KPW-y72nqxyqmthhXxMzmXzudp4wtX_Mgw48ljtcTYCvpmBm7bI51G3ZxiPnxmPl1kJBU2oXyhzZwcmZCOSvJ3RUo3jRQpeSgYXb_2w_7K36rstn7vzCJ6Try8-4uNf-4kXYLZLaMJRDfR4HCAqXcfcZkOBIAv9dV6hQ__9CZ00jVAWDQWwKiImv5lqbOs3xZsILSdSMGa5iS3sT6w_GHWQQ6bCemG5BRQ34_7oqd84Hkv5nAevU82IDwF3iCl25ETg0DY7BN7cre_MwjvBdOr_WMcv5JSzxHcQaJEHV0jrKMYnCMOlJZ_N8mSyE4fz0jMNThdOKJUS1W0Vz5LqhXT-7lFnweRXPHpamTnfwcknQSunFy2QtXQF1JOvDrFih7AuFdhLYpU52SBRyJom4G12miCtOfGcHQMwbfgYOBLrvAFSlLBPbMt2IoVMa-ofgShwplZwwI4EuAccQ82EeYc-fxFs6zHZFVWwm3qzYj4m-40xPvf29xv4pbrXZFttSrmR0KKWoxtjfDbrtTqNttToBkbbapiG_zvhqnoF1hzrSo4YH2lhSvmCMcZ-dQXaj8z2D44M0r9ZR7OeEMCAcr8zOtDeQYYEPAylm5C-qSO3pWdixTYlA-FPqOD4xQ6vzw2jvrY_kJVhNQAf24rAj-Hjnnb0bJIxdjeP2R3KV0j0kSghR9vAkiBIi7sw8QlJZkQ8yougencKW64heu3MeDu8aP48-z5Z3wNbsofO9YBxyc4eE3BT3u8OrhEMA6RplFzClpSOAFkWEEOy9ungutXDBlzTaGEEDiToMmkoPJASeBhXj5rqs7ae9A5lyDEv-CYPM4Ug_6bXYredhz9YX0RRWpRTZg9B41GdE8ZmVX9BPi1dSzlgr6jc9LpehQM4kYEIudJgm2pmG9lS-pyeFHaoH3jH5t2gcVrg7fuqqBnq6lKtcpE3gBXEUBbVPRyyZb9yFOX2mrrL0PfmIHbjeEYkJF_vZjVtBh4xOCp5HhJA2RfxDsayEzhW7143Yk5uCCvYStk-e7jpOyfxi7WBuB0BXF0QDUrabMh5jGpmhLjC9JluyviIuophoITyP63pQZXflxjOujBZKjPCBzIbgN5xX9JmSsLgBiF_2c6LHy_Fe-IFThyLufAhA0Ln_Cc9rBmu_uNtegOJQ4v7whnedJhJrmbUxy6fcx8TFrfk1pom5xe7u1FjQ_nfigAcYEOo0y9lFDmIww3V53-a9ayZs04HciYZDo5Hd63rDjvq3HYuBpe9Tn-0sNPCriGnbZqUVw1MNWtpkmDnmOLHwUo9zh2PAkA3g1YALj53TttHt7NxPjUU1EgboXCCpcuZ8yXi1ZZ-_WeOHLzTlFtw97QRF-h3SyaPAJFpC3atpaNdfFlU6u-6OFH9vWWJSn0vlapreoK8yILqZ-Knf_fUPHIPN_RJBiatig2ob0R87TJX5H4dDC6_UQx_2MD6fzFvpn9GeZjU65TZOgsadp6fKtVue9CdRDkNP1LtN6nemrIfySRbIxi8QIYqzafNRwqPTXCWN3LaOFl2IlbsTT1bXbwV9C7ditsfjd3jySxv2bZOQFqopJSxUJSymAhVKmgBhnV-APCzr7rCslweRevc9f8skXJVnKXG5etWJvFVWupNjoQeUjYNdXaichdbm4A1rrQs6_1J37Fa_fmPXp7C8hCpzWbtYb2iirn9CEVw7FD5B3zowmau64CCWqLgAmnhp_zgxgfxDiPifdolPmy6qwo8mzb3qnhDSUCMQHfG0jb0SrVKvYgpuRz14BQFRQ71dEOEL5ft5Ja9zWzndY26TPdfOx3j_C7q7hZCnMOhEFCwUwv_8zDHT8GuEu7-SBBTQ8osII0wQ7YRf17CXLAmU3_Xoe2K3ou4iU-PU3tNmvBqyXxJr73nJ3-wtutgSgwje77Al7nzJlmA1Mcm-PBjB2ITDmIy4cznQEuV1mpvDtHoJPT4CtU_O_OsC6NfPb-K1kGtHfJomgX0x-i1iEH1SnaSkh6mmCI9Y5Awa7ZF-TZgerzkOuDzr1k3fFs3KWLVCCeLL9sV24BqXTzgv66UwSrDqnN_dH96l_SG-TQ1gpP0UIp4qD7A1BzlvyWoKbjqb9AjnmPieqWbarL0wISqZ7xLhZUgn6uZbiIMM5Qz_0uUF6dL8UWDASVuyFHZgZC7QD-1pnK6tMI-r1ir2-lMf17J8_hqQ3kxmhKX1_3MrAl6naTNRRRjQA1gQowK8EathkJm-U4PPNddj9GVrmzOoosmZppEE-pjK3FRvq1bTOJRgN1APNuKEYQQRRVkmZ1IErHoli8eyHCyY2kyUtiI4OX-duDd1HqTvH3_ooXm_M4p4YaW6fqpUOE0EGtD5HtEUVeaal8pSKGrC4CAh0YxqAX-IoIT8mG4fzAFqK-g2dcIO2tNMR4JUB1aFVT3DuX3p7P2-cMozzKHCLwgQ9oMh1Nt78Bk1HNVCn6oLEVIKmrZp2nnzkU1JaS0igwcQn52VpgdCKbnGFJ3rlBzpvOCTgHQhQJrKkRFsaOpJ82pOZO3Z7v9uu8-bQCmQ40X6y2-448axXmSofINTRpDnd9vDAqdTXSSGaUE7HcbhXtHr_OZvHttjDccUJFdOrSlpkQ9XlrLoYXW5OZUmg6pLYl8isNFPq8MR4ClmvJ6J4FdeTwmQoEaJIxWjnFHKgkrmVMUMv5KVCayvbs3C89K895mBVtmRL0OkbORAtoa6_BovqwL_qF3c8gpA6576bIrAaIo3ixkdSL9eQ1crunO0iVp_kBICCQgUKGKF8Yo_gmhlyzS8Us2SMY0g7xCpUD91oLKD8a93UyCq-j7_QZEzncdN-i-ZcDQd9R1oROGxTHwHx8fbger_DvOGX9zo_MTGzlAVmaU2SnK36yfE6COJWzS9xgInikpRvkGsSxP3B1xy5Pb7ysIfFbrXl7_cI6qG2z9bgt-9SAnZZIB5_GG1LN4tiS6JHe5Pmc5pAyf3dGFbAmzlMjApchSOb6UlUo76Y0Mnb4D8nyurjcgJPRtlThXDxf0_Wn3bs7Ozo_tqHjWWqsYFT1e_d_YfUzqVmX8mDQau1VqKhrUbDSbe4_JXqVSv0yHNur1ff374hBwK3j3Gb4Zjfpjsl_fq7x30r7-9vq7yAsmMXp1qvWYNBtC4EGtsrvyoFqr7qVfvlYOKvTvmzpKNumtXRMj63t7NXyKMccv44Yg7SsG_m9WLeqxViq0lCo2osmpL1sf06asCG4eVBta7jdGDVwS1miSgD3LapKAfdKluQcBDWPX_BtG7Zl7NKpOO5oTV7wKcD56kIfV2-ckf6h0IuXEXRRNbaqo2BGfMwMsHalq_YbFX71wQP67JAKUx8E-4FwKTvKXoBZkKUiJ_IhOUSlvqiOymUpDS6L1KXfa22_w0u3FIa9-cKvhgN3J8GUBCGfDQV8fkSQLpvccqbb9hyRvQ54cLUrpD6jfDJPnZqbQK4N1bOi0uJLbepC6Q3W5IdC-PzS6Ru8s7Je6K9Q9HX0iXRvENprS9ttIZJHDsyJ1SIQ8Zj3ijwCCI0Q7R4GGraFsba-rrvqqt46Ife7RAk_ppta5JNZFuwYyJ0QMQJF0tAnSnkFn4sZE7oEdrmNNVZWtLlsYuyol0RUAkF0kM265QnXWURCMOQDJ5-QTd-Qa2JfR7Qqsut8TeX9_PCzl80kdSmMFC_twOJy1ITGSIekE70tGuWfiSygKF7xyhdiYTsYmOcFBJlgfBSjzOR7yzasmCz9Q8RIXQbpQd1_oaFEfAHsSXkzlG8hx0ZqOcVx96LUemlf5CxsCHBicmF2khVCemi-63Pny8zcKE5vq7UWjq1CISn2zJsymdVenRV4cjS4PHX-ZW-iv6fiqBCnq1H69aorG_Cb2ZwUPxWq6EfL5gqypEFSwISKV4lszQVct3snvaYzgkTPxUR0IospZxwtLbapbOLn0zMNn7pfJCtGOfkt1_cp6YiudeLm3JAdSXRgpkDMRjhNXWc-XK6zmeXTv9J9f_dOHD1gNwg8uzPFFV1rqm7rGliM1iFt9Uk2nokdSfyewWic5_2sU0h09p7AYJ1uMIq2a8izufFjSHyeRguyQekbkHNHKTaOmmO7ajYibrQ3d3l56r_AiW8KC4HzVNajmHesdQH0orC-OOSFiptXNOtr5lsMnXTavF56rFxqXfC8hU5NxS0BjzKFBuHCN5UxmBKegaXQ6q08v7o95d1YI0UlC2Nl5C0LNkZdKLm6hpP_BWPH2_j2GTJRYilo5cUC6TMtLOtHlSg8E6VjgHVUDkNXEW6zwSV0bowPItNWnT5tRWrr8i24C002IsePqlo5Nt5FmRZWt80v38mx-Fcb5Pt8Zp6tMl4gMF849lLp7nN7mUVd0U30FdY_iP9QGaHsjVCGDAf-ba-rPZrNyMFf2AJZkr6TFC7iDUoO7Ga8nZfqJdzxo3wwBrqxeMb5a32oIUr9EBYtD3fsJ952fPL2MrLANpWKszoyRXqJyNktB6964em0HHef7c57CtrOu-WBwuXqLKLtg1PFVbU9_1kbtqrvgG3KRShKwg4qvRRNoKtwAuKPORyP8EtJVa2XTGMrG08QzUXUG2nCJSRLNrG_h0V3k_JalN6kXrRcddmBP__z3_wA8J1ok:1uPCvK:9bBUH8VlWwBMEQ041CYL0qI2SxP7zM7uYVJwXObtiXg", "expire_date": "2025-06-25T04:18:50.452Z"}}, {"model": "sessions.session", "pk": "ps5vn9avdm8a7qg59a19k0b8dppado6r", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uIlhI:kTDmt868-pbS8Y82RUXLYMLfQErK_i9pRJc-ziMIUjc", "expire_date": "2025-06-07T10:01:44.405Z"}}, {"model": "sessions.session", "pk": "pyck27nqkp8ndota8rguzzgzljd3no52", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uWCwq:LqBdEgenUwSafEGhBxXbqVt6L1xvbN5sU8c-etNdP4c", "expire_date": "2025-07-14T11:45:20.743Z"}}, {"model": "sessions.session", "pk": "qxblp14bto2x5jffx45y1kdzc4buq3x9", "fields": {"session_data": ".eJxtkUFvnDAQhf_KlFOLVqgEDN09RoqUS1upjVRVJVoMDItbYyPbhKJo_3vHXrRtlRyZmfe958dzdOSzG46zRXMUXXSI0jTa_TtsePsLld90P7k66aTVyhnRJP4k2bY2-ag7lLfb7X-AgduB1Ox9UbA9_4D9njV73mVl2bCMZX2ZsgJxn2ZNnxd5y1ie5ykvC1a2bZbfNH1aNnvmoe3A3XEQ1mmzRocfz5HREgntbWg9ceNsmDv87Wi-GOEQOEyrG7SCyeiT4SM4DQNKqWHRRnbR-fG8u6K4tcTnyr3Gq-v6gqrUZIRyb6vo3oN28M2T3lTRu0rRUUUHD5QTrFAniSCFQtA9tNQRLEJKCHJwA4JHwwuOz7jq2ZBEWUqWeGQc3-vFb8ysSEt8DzzEsV-mCUAcf-VPGLDbBq6DkIE3mj6Fok56QcEUH7GDOrSRTGsdbG4C6fOE6hLBoRmF4hK0jzOOXHW-ynFy3gA-8Sdx4tQzBfNGnTDY-j8Ey4AGPQMspXjhkwWfL-EtfwM_rBPCVjNcBXAxRWvhTlEgkn733EHPsgOL-EqFoWOy1ds7bGsQFVn7P_54_gO_RwOx:1uJlfs:O6IRs4C4FVrd-ASHuH49epa9USdSooKO7tGZxAVacEc", "expire_date": "2025-06-10T04:12:24.234Z"}}, {"model": "sessions.session", "pk": "reh4i2zy6ewp85njht07x9bhcfwyp5lz", "fields": {"session_data": ".:1uPItj:72W1L7ZNgI6yLtfGlq2vBWrhIk2Afft9Yd141RBId88", "expire_date": "2025-06-25T10:41:35.779Z"}}, {"model": "sessions.session", "pk": "s523ycg8sxgk31hj8yap4185qp64z62n", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uIiWV:ePSRkt6bEdtVCHbQUELrGoxTKddlWMBq63lZsbWHQbs", "expire_date": "2025-06-07T06:38:23.385Z"}}, {"model": "sessions.session", "pk": "sc4cnwsni9scs24cgkae2iztsi06zcvx", "fields": {"session_data": ".eJzNWv1T4krW_ldat2pn7i2DgIAf-8NdBBxRFAXU0Tu3qE7SQEs-mHRHZNZ9__b3nO4kJCRwZ2tra7fKQiVJd5_v5zwn_9gf01DOxqFgwZjb-2f7lf2D9HcmtebMwwv2K_WmfsnyPRlws4S3lKKronTj28w5j-7NLDCjYgZP10-to5Mym1RP7XqFNex69ejkqHpcKduV03p1clyu1KumPWnYjcZJg01OTm1aaVQmtApfHzVqJ7Ao7sze5f7Z7__YV0c1u69Xj9du88cpXpZcOgy-vXseXfZvyXlz2G0NyeenGZWkS5780LFJj9HAIxc8EPIXeMRmwgr4QnLfgwe_dEZkOGoORp02eeqOLsmgc9frjkipVNr_50G053X9-rHzcEQpu0_vuZIzHxYOHYe0_DAQjEz8gJyzKfc8Fgjye7Vcrf-R2_KGCskCEj0-CXyXwGUqrRm59cnECSeTb2G1XKm9hkISy4HjH5BFQC3JLeoQy7e5NyVizh1HEOmTObfmQtJAkhWcgrzCh8dWewQWOW7UvoUTVp6QK597RM64INaMwvEcfHLKZFbQu9th9-n1qdk89lOCNkHA6LTDlSfpO4G1qnVyw71QMkHUaY_IKJR-wKmTE3iE28KPnIGGUHgQa0lXeAJH2YY6rg_fUdjHn8RbCbVViQy5Z7Ho6FrLrv8Gu34PQW5nRbgkLixmMjJjzmISKslm9I0R8AFYHxYWvsuygt4Y_EU8VU8qrU5KUO0p0f7nVHBLoKhXaIdqOZZ3LydgbEqwvplYX0bqOCDLGQsYGucTCOik92BCME_CTUI9bFNJCfWosxJclMiIzhlBk0Z3ayc7y0oy_y7bdXvhnbZO8r6Z9UcjCoWW9qAll7N4aZCyQi5h_ZxsGZ2YiU6Ub1bIDB7ZI3csmDBLbiiAQ-QGYGtm4wPNLkhmR95bQp9p0Aq5c0JxoPywAWb15ExoD2jNaOCSi0Gno4-ZEfmp4x51Hmxutad5kWMvxD2PEpuRz60AclI6Tpum8B24tlZQPjs8McdC3wGPcleJGVIr7ZGup_zagySF-7l6vwPIPtQlUx8VDU_LYKXEl4xCmIMrECqIG1qJAeDfLrGoFy0Izp4V-fL5yPxRH9_b3QIrYwaKYgOjnDnhNNQmRfuQDzisu3AYyLrQT0Q3f5BH6gpOziFcqMdz4sdHeeM28w_gqewqDtSGkE4ZxjZ7XziUe9rWel9wYHx4UXRIywlhK8hq_jSgrota0r51QN4omM90UIcZFSz9x6vabd1zxiKvgihYP8imF1xkIuCDZNz5LrW9ysPDKA9_kI4dBmxOcyqJvk98gQWSTyAv42UyCkAFuNjnB5ASwoyRb_vP_YfRw3mnWv62_8tG7Pr3X8e9t-Ct8sPKZCHLqJTP4i16XEhB_krdxd9I07IgZSTHxUs6Ptg7RdukNJAN_TsoD0b1zwzc_eSiSeA_3IKuDQ5BvDDMlYG_SeBT26WLKNrhHnWzinDmwYYMihsWCCh-Bnw0SqQ7US5vBwxiAuJ76QdzfCijjIE_vhlao_bkobYtJcOqfQ9SfjquYxkTk-ejOCOlEjKJS6gaKiTxXzwihrLlB_gBVWchsWhRVVghwsG5sdx6_jIunqrswtfKBqEyjD6qSnB18xhMYOWKj9s4Nsz-ou_fPezIXwb5U4AB-hhRl-crrqr2GPrq2aEEjEaemEna7I05_sKFohM7_xmZSbkQZ4eHLAj8wIWaIwBzvLEAUJ97iGEr8Hkjit3oUDJ3zHSAZ8Q1y6dH9HvzhWfE_RbaJ0c2fFqNUwQQZXv9jWkWe_FWhBFbOOOnBVX5U7os60o8A2uieSH3ZkyaTk3cS8y6GTGQuEW4aeC33vfRpGo2vrwsdxh4sis1YRYt1VVJFsWASnsz_OFSyDPKAylxfIkB5gBC0imiufAoOI_jMMjTGUTY1JgEgzHgIDA1_VASyOIWQ_8Qh6p-e2LGF-I38kTBZcDrFwFb0EA7YkbmcXgfXJVH8xfH-hcw8m64ocp09wAkxAhl2mJgkANVS5fg0HbKoZUKlHFicxsTkMyzIWNYUbX-sgVpZEQJJsJ6HJbfpLnclomMXbA_tnAe-o9SKHYJ-J1M-Zu2AtXxAzoPfDu0VDmBf_wYFOcTE3jIInLKC7AvuDF1_BjW4e3KQYRSVYQ9IdvRrKh2W7aYdOZO81_rbI61Z_4BinjC_ZpQlaae8psCT-6D7R6Vu36osrDb6ovNqhx3R0kHE5elY0Phm3TmyUDQPY1AQIUG9wwfTpGkLQsiBATBPAe75ooRexpMZi8PP4JmgTdndRF1P2ll_Z4GFtu9QUuNpiqQfA2uIql3SPmMYcyT5kL1WaFnU7QH9hbrpiqC4KCIpZ-VuHw9Zi9fhvVbUVCUcL-oa-hiVnjjbIn9RGetvnSJvIYSmZM2LjNwk8QjlLh_CEs0QRCJ_XDUEaYTTH7L1oxZc8xTAMcFlFYQp6X72TPy91tYGUFXt0_aXEC02Bt469GaD64ab5XVU1rGoeUvmNJMG1YEV_NVr5RFliqqhtTdYcSoOVor2-FxFoYHIUitmdQOBz7BhE1XEUJGkIztOzxJQSrIWRHsUDZVnqo2wFYxSJwlI9lqMXk9brlf50WQAlV5F-d19Kdj0qarxHPhb0DsG1EbiQ0GgXYH0MPNbStthwtoq3f2wf-J_chIoy46YzTCXIrxWO-VhVkn7a9NsaI31-W8TuLoWbdCXwCd6hZ2zu2CJn-Uriw5GIRphkzVEqqEoiSalOEa_CpGwmPKlqsF1ltvpUPRZLApKwFAIyYsMCe2v9QeBQpyMCgWqBp00Ix8D4FwL9473UV9vgNlXGwixkvu2TzdE2bYBZKgMLsgT3feLS4xJG_BKNCqfgKZFBPg0NCzZiAVxGUbWYyhBZXXYutVlelRBi4BhSGGhrN0lIDnPLCj1mYv7hUQwdg68d2le9aNpjA0-u5jMJ6MagVN4QWcCQ9e1BcWMwDkL5UtAY5lWCOkBO5Gix-QX2kwxV-_zpf4VwqIbHpJJm-XciYoyu4bKWw6vq257cvO6Ouu3mEntFwTW7s4rRjwZfgqZO9-SzBwHmZtyHsAGO1TksJQhcqrY9JrjWXSxSMNwrMVajxpBrX2-bhVILoW6gwSKiMPjuQuBbV-CQF0bCjjMwKQfI-4TuMTH0un9pt1LudbZVYwaw-iFyVdUmceNZKBH04Rs4AsjqPWO9AlAvGLC5EALqMIP0wHYrNQzcLrXq0mGp28qE2dDpEyuvMBd5kOS6i99Wn_7zghaAtJ75tnTa8N-xejp-agQ9qdx06vf3fTuR2RLw_ddoeQpDWUEbFRksyaoXuDgksek4eTgDFjqtScJnsSh6fcVUld814ZGTuD1s1X6-T92C2AWFs8OQu7P6tAu_WRB9D8yJ1myRm5hwKrTJi39HPU7KUo8xFDIi6uIofdpPGJyXQd0pD0yJBPXUpqpTJZN87L5bJEoc-ydJtV4t6hjuRDgXcbtSjPmZjnMjqQ1fF99Xzwg3UK7JwSNdO4IWsXUWSR2CrjjpQbYaxbMgSYkM9kykJOdHlJt3aOmd20ejOnPi0vL3rDV-eiV0A5R9mlu213IeAmfcWEhQF6acR1gBRigOyWyqnryMgwglhAdBAl-TeVRmVqi6jsKiiJHAmnmw3r-_0t648GK55mkbvpBgzwRtzvVdY1ZJNS3HTZj41E-wFOAwfkKpPm1NLUBCI-iH7nOHyqCmcnptI-d89vfske_aQ7GX6vnPSh2Gw1AAaO8oummifIfBZIio4nuJDg-KpPdsEo4QKTC_ZLUeepxjPQQtkME1c8e4Isg2Y6IKGAXG2usvsdpICA5OoLhbHxy4w0vbp4aTxN-95rAU5DHsuLetnUACNbN7GUxWRJrjtbw5mPdEjl1KHoWiUJT3M86zCfQqCEpmLFml74alyHLg2MIfIH9FAnvjH3xnDcsT7u0OFIchetmVHAqDc4PXWWXyvzAnO2wDwyAIfEriQKd5Z8k_e12BtjKjqhstfXBmwJGBC0mSeEf4rezmY-ph8BvURKMFJtrGGlVzDiOqKLRbxZD_skrbLs0OPI8YferGGzdME_32yzDMVuF-S7Sxy7YQLIdmephrsCbh3ly5KKa6xn4HAOsk06h4PbPnLBJekGE6gaN9Th80_JFHXDkt-XzYtepX56zG5-uqbpKgbK4qi4VzhNQdHaSpDkOJEiDBn1mWsYCm0KiCyyu8aYBUGu8BNSdBFu9FUn163w8pK1xjfpeM2xl9FscM3qlu2cWBFc-Iv-nZwv-j8SJe6RqR75ZjkyxBa7CZRk_LBUbwOA-dga12YE4--n1oCezx9ZQSLaJMOUp6SFU8iyljddLONauvWIdGd_8ClD-eDi5Ne8li_7D4NfNyZlPeFavZp52UujipZDhSCVyhnJRZCeBMfY6XuMnTRbdwS_ut4ERwMSH4vvgxp_R8qNOlxu0jm-8LFjeqroy-jFAz0OXzI1FMXJKo65FYkkoOMVHGoe6gFMtkeGK8DOZgi7ti82Y62z9Jybc9qbFOBH7C3fLYbjidyAaEtw6fvj0XZVua9Yp7o5e0MsD2AFehlZwvPOMbFhPSCF84ddk4ZQpItXRq5zVu02BycvL90CL0wTi9qMRn-NoNop0LSr-V3XhGTG-MaMfAL971SD7mMnqxGvN-iNby3v2khPBi9pAMDQJq1hvazohVNBuhupIa2u9OsOac72weNIBXO52oYMdrPT8TnW60DGkcTm-JKKi5S9zdgCX1TxokCA1flUc7EIDFXToXWKs1FmErpYiIL3Hq7YD-9pfNx2zgs8o29iEid9bEuxdU6L_rnfv_sFm6edo5f_SFe4yRUQX5_Tj8-ZpbTs4x_s-XZVyQzOqqVqaSvO-bcG_XnIwPdIV_Ouppq1KGeCpwDVGb6eIdhcWKHqU6LeCZN0lNtc5pqa2omJajQ4ROhcE3hqMBvdhP0ldCnr12Q2EtxL5dk-Dhf34uvzn4CJQiILRzNIIuOcL2kYf_t55_5JFmuPjDh4A6mUiMJb0XteC4euHHw9QQEuTI2K106had8vTZ1D9kjDx69Zwd87wYPXv743L7bO3xDxa7xfUM62jsU3l1B3bb4pkWFDVTAUD901ect9kN9lQwnI_IyUz8r4g5A0ALvi5F0WMNPHbFazG4KazYJAvomGnb1o2Lk29ec0s5oHGuchd2xNaEzwZUd8ISPCdunkFw3F8kTW5pR1bXCoVoIEjDrG0g9gD-z6StveL8xIWqOjRuOq3DpppVubS6iE0FurjqubGOTPY3ozB2Ts-RH3zwtKZcEbAsm1LEFtRS_VxX7J1zeqVo_abxTuszdqF6rAEHoNgyY9vMFTPbzBuTRcagdUHBa_1nW7evx-d98w6GW6wxkNni-breubDvnIyawgWb5SZ19xWcXzwAn2eRiOyEvGlCTmIfW6lkcLIHS00cD33ZL6BHDgzTcAJrt6fKIhaw9ref-NFvhpluSnOtX_FWyypVN9l8Z1o289iO4OhaQaiGJGHozYiEiMrWTTLipplErWBZvqc6dmijEhnxtcBgw6rSBPx6eySNRSFlUjpZk__vn_53Lzaw:1uP4Q1:S6eMosHs1WsbeMjd2sHqsbcWoi2ycO817dikTk0DwkA", "expire_date": "2025-06-24T19:13:57.682Z"}}, {"model": "sessions.session", "pk": "tdh0y3ukoel3ah13jf9d0469f3cydu0g", "fields": {"session_data": "e30:1uWWMf:9blifebDnCRgnD88E_vciFqFVzKhnSsQRe3KTgk5c7M", "expire_date": "2025-07-02T08:29:17.171Z"}}, {"model": "sessions.session", "pk": "tzz9b6iy67oa2em3jzh5dr551w82hh6v", "fields": {"session_data": ".eJxVi0sOgzAMBe-SdYVihxiny0o9R2Swo6B-Fk1ZVb07ILFolzPz3sdlWd41L81eeVZ3duBOv26U6WbPPezYuoNbd33IfL8c9e9SpdVtH9MU2FvBpBGMNGLggAN4hRSxDB4ijlpIiZiscFIBgiK46UA9u-8Ka3oxqA:1uWD8n:gb_lP1eSWvcWYh3iom4gyY3KV55XxnOf_D_SUM7EvTo", "expire_date": "2025-07-14T11:57:41.611Z"}}, {"model": "sessions.session", "pk": "ujt04nls44bhe4msx9vznxy310tg29zi", "fields": {"session_data": ".eJxVi0sOwyAMBe_idRUZAwG6rNRzIGMTEfWzKM2q6t2TSFm0y3kz7wOZl3fLS6-vPCucgQhOv2NhudXnbnbsw8F9uD54vl8O-3dp3NvWT-iiNaNWtJgokCKRM8qRPIvoGIpQFbKT9yjsjK9JxZSUNAZXXITvCplyMn0:1uVPol:Coodi-mwYbnfN2517o9e7OKkIrGVbwkhR7ZfxktD4I4", "expire_date": "2025-07-12T07:17:43.207Z"}}, {"model": "sessions.session", "pk": "vo5u7xqvqpicagwstt116fug47sz0oj9", "fields": {"session_data": "e30:1uWWMo:oPnTD_OJaAkVt5_V6PnlfIC1P5ZVyqUX92a98yhBwn4", "expire_date": "2025-07-02T08:29:26.633Z"}}, {"model": "sessions.session", "pk": "wws5ik4p12r0wipzjxjragrz8u44z7qq", "fields": {"session_data": "e30:1uIiUX:ZKlo_BCqlkHLmQPOWEo1oX4Y4sJQ9mkp0U3J6OiCKi4", "expire_date": "2025-06-07T06:36:21.110Z"}}, {"model": "sessions.session", "pk": "zyhezzwb8mc0kradkli6rcqfasnu2p0g", "fields": {"session_data": ".eJxVjEEOwiAQRe_C2hBmkCm4dO8ZCDAgVUOT0q6Md7dNutDte-__t_BhXapfe579yOIiQJx-WQzpmdsu-BHafZJpass8Rrkn8rBd3ibOr-vR_h3U0Ou2Ni5pq3JBxwYysUFtNQ6gGJzBMigwGLkQE1nKxToOQFACbljT2YrPF7_yNvE:1uOUMa:hgj6fF2WvJuC707we5pA9T79sCpDrmhRvJ7xVCzoOVE", "expire_date": "2025-06-23T04:44:00.737Z"}}]